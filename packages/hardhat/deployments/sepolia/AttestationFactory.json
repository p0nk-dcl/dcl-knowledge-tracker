{
  "address": "0xe06D5F27bB990Ce83002F2B97F651BA1899d9eE0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mainRegistryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "attestationAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "authors",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "contributors",
          "type": "address[]"
        }
      ],
      "name": "AttestationCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAuthorized",
          "type": "address"
        }
      ],
      "name": "AuthorizedAddressAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "removedAuthorized",
          "type": "address"
        }
      ],
      "name": "AuthorizedAddressRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "VerificationThresholdUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_verificationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAuthorized",
          "type": "address"
        }
      ],
      "name": "addAuthorizedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_authors",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_contributors",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_ipfsHash",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "_quotedAttestationId",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_tags",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "_coPublishThreshold",
          "type": "uint256"
        }
      ],
      "name": "createAttestation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mainRegistry",
      "outputs": [
        {
          "internalType": "contract MainRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorizedToRemove",
          "type": "address"
        }
      ],
      "name": "removeAuthorizedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "setVerificationThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x355e1abe5dc907753c4e5c9f12925bed72959708519b1fd67b0d58b51261da69",
  "receipt": {
    "to": null,
    "from": "0x47cf32288Afffd890fa1cb3F6ce8faEB9C9F86d9",
    "contractAddress": "0xe06D5F27bB990Ce83002F2B97F651BA1899d9eE0",
    "transactionIndex": 38,
    "gasUsed": "2827651",
    "logsBloom": "0x
    "blockHash": "0x4f05cd83c9703ced9034cc0597129fb68acc7d21139bf98451d2e0e69803e788",
    "transactionHash": "0x355e1abe5dc907753c4e5c9f12925bed72959708519b1fd67b0d58b51261da69",
    "logs": [
      {
        "transactionIndex": 38,
        "blockNumber": 6526589,
        "transactionHash": "0x355e1abe5dc907753c4e5c9f12925bed72959708519b1fd67b0d58b51261da69",
        "address": "0xe06D5F27bB990Ce83002F2B97F651BA1899d9eE0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000047cf32288afffd890fa1cb3f6ce8faeb9c9f86d9"
        ],
        "data": "0x",
        "logIndex": 42,
        "blockHash": "0x4f05cd83c9703ced9034cc0597129fb68acc7d21139bf98451d2e0e69803e788"
      }
    ],
    "blockNumber": 6526589,
    "cumulativeGasUsed": "7495464",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa8f3Ec9865196a96d4C157A7965fAfF7ed46Ee97"
  ],
  "numDeployments": 1,
  "solcInputHash": "980f727d7032392788f471ccb8009e14",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainRegistryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attestationAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"authors\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"contributors\",\"type\":\"address[]\"}],\"name\":\"AttestationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAuthorized\",\"type\":\"address\"}],\"name\":\"AuthorizedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedAuthorized\",\"type\":\"address\"}],\"name\":\"AuthorizedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"VerificationThresholdUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_verificationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAuthorized\",\"type\":\"address\"}],\"name\":\"addAuthorizedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_authors\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"_quotedAttestationId\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_coPublishThreshold\",\"type\":\"uint256\"}],\"name\":\"createAttestation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainRegistry\",\"outputs\":[{\"internalType\":\"contract MainRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizedToRemove\",\"type\":\"address\"}],\"name\":\"removeAuthorizedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"setVerificationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AttestationFactory.sol\":\"AttestationFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/AttestationFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n//--# to be tested (& deployed)\\r\\n\\r\\n/**\\r\\n * @title AttestationFactory\\r\\n * @dev Decoland Dev Team\\r\\n * @notice\\r\\n *      The AttestationFactory contract is responsible for creating new attestation contracts.\\r\\n *      It interacts with the UserRegistry to ensure that all contributors are registered users.\\r\\n *      When a new attestation is created, it registers any new contributors and links the attestation to their profiles.\\r\\n *      The contract emits events for the creation of attestations and for adding attestations to user profiles.\\r\\n */\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./MainRegistry.sol\\\";\\r\\n\\r\\n// #ATTESTATION CONTRACT\\r\\n/**\\r\\n *      The Attestation contract represents an individual attestation (a \\\"knowledge production\\\").\\r\\n *      It holds the details of the attestation, including title, URL, IPFS hash, previous/related/quoted attestation ID (work/knwoledge production), tags, authors, and contributors\\r\\n *      Contributors must sign the attestation to activate it.\\r\\n *      The contract also handles contributions (donations or co-publishing 'donations'), upvotes, and the distribution (equally) of funds among contributors.\\r\\n */\\r\\ncontract Attestation is ReentrancyGuard {\\r\\n\\tusing SafeMath for uint256;\\r\\n\\tMainRegistry public mainRegistry;\\r\\n\\r\\n\\taddress[] public authors;\\r\\n\\taddress[] public contributors;\\r\\n\\tstring public ipfsHash;\\r\\n\\tuint256[] public quotedAttestationId; //related/quoted previous work/attestationID to create links\\r\\n\\tstring[] public tags;\\r\\n\\tuint256 public coPublishThreshold;\\r\\n\\tuint256 public verificationThreshold;\\r\\n\\r\\n\\tmapping(address => bool) public hasSigned;\\r\\n\\tuint256 public signatureCount;\\r\\n\\tbool public isActivated;\\r\\n\\r\\n\\tmapping(address => bool) public isCoPublisher;\\r\\n\\taddress[] public coPublishers;\\r\\n\\r\\n\\tuint256 public upvoteCount;\\r\\n\\tmapping(address => bool) public hasUpvoted;\\r\\n\\r\\n\\tuint256 public totalReceivedFunds;\\r\\n\\tmapping(address => uint256) public unclaimedFunds;\\r\\n\\r\\n\\tevent ContributorSigned(address indexed contributor);\\r\\n\\tevent AttestationActivated();\\r\\n\\tevent CoPublisherAdded(address indexed coPublisher);\\r\\n\\tevent Upvoted(address indexed upvoter);\\r\\n\\tevent FundsReceived(address indexed sender, uint256 amount);\\r\\n\\tevent FundsClaimed(address indexed claimer, uint256 amount);\\r\\n\\tevent AffiliationRevoked(address indexed contributor);\\r\\n\\tevent CoPublishThresholdUpdated(uint256 oldThreshold, uint256 newThreshold);\\r\\n\\r\\n\\tconstructor(\\r\\n\\t\\taddress _mainRegistryAddress,\\r\\n\\t\\taddress[] memory _authors,\\r\\n\\t\\taddress[] memory _contributors,\\r\\n\\t\\tstring memory _ipfsHash,\\r\\n\\t\\tuint256[] memory _quotedAttestationId,\\r\\n\\t\\tstring[] memory _tags,\\r\\n\\t\\tuint256 _coPublishThreshold,\\r\\n\\t\\tuint256 _verificationThreshold\\r\\n\\t) {\\r\\n\\t\\tmainRegistry = MainRegistry(_mainRegistryAddress);\\r\\n\\t\\tauthors = _authors;\\r\\n\\t\\tcontributors = _contributors;\\r\\n\\t\\tipfsHash = _ipfsHash;\\r\\n\\t\\tquotedAttestationId = _quotedAttestationId;\\r\\n\\t\\ttags = _tags;\\r\\n\\t\\tcoPublishThreshold = _coPublishThreshold;\\r\\n\\t\\tverificationThreshold = _verificationThreshold;\\r\\n\\t\\t// Automatically sign the contract for the first author\\r\\n\\t\\t_sign(authors[0]);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _sign(address author) internal {\\r\\n\\t\\trequire(!hasSigned[author], \\\"Author has already signed.\\\");\\r\\n\\t\\thasSigned[author] = true;\\r\\n\\t\\tsignatureCount++;\\r\\n\\r\\n\\t\\tif (signatureCount == contributors.length + authors.length) {\\r\\n\\t\\t\\tisActivated = true;\\r\\n\\t\\t\\temit AttestationActivated();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit ContributorSigned(author);\\r\\n\\t}\\r\\n\\r\\n\\tfunction sign() external {\\r\\n\\t\\trequire(!isActivated, \\\"Attestation already activated\\\");\\r\\n\\t\\trequire(isContributor(msg.sender), \\\"Not a contributor\\\");\\r\\n\\t\\t_sign(msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t//missing amount for donation (and if the fund > threshold => co-publisher ?)\\r\\n\\t// Creditation as a co-publisher, no rights attached to it !!\\r\\n\\tfunction donate(uint256 amount) external payable {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tmsg.value == amount,\\r\\n\\t\\t\\t\\\"Sent value does not match specified amount\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(amount > 0, \\\"No funds sent\\\");\\r\\n\\r\\n\\t\\tdistributeFunds(amount);\\r\\n\\r\\n\\t\\temit FundsReceived(msg.sender, amount);\\r\\n\\r\\n\\t\\t// Check if the donation amount meets the co-publishing threshold\\r\\n\\t\\tif (amount >= coPublishThreshold && !isCoPublisher[msg.sender]) {\\r\\n\\t\\t\\tisCoPublisher[msg.sender] = true;\\r\\n\\t\\t\\tcoPublishers.push(msg.sender);\\r\\n\\t\\t\\temit CoPublisherAdded(msg.sender);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction setCoPublishThreshold(uint256 newThreshold) external {\\r\\n\\t\\trequire(isAuthor(msg.sender), \\\"Not an Author\\\");\\r\\n\\t\\trequire(newThreshold > 0, \\\"Threshold must be greater than zero\\\");\\r\\n\\t\\tuint256 oldThreshold = coPublishThreshold;\\r\\n\\t\\tcoPublishThreshold = newThreshold;\\r\\n\\t\\temit CoPublishThresholdUpdated(oldThreshold, newThreshold);\\r\\n\\t}\\r\\n\\r\\n\\tfunction upvote() external {\\r\\n\\t\\trequire(!hasUpvoted[msg.sender], \\\"Already upvoted\\\");\\r\\n\\t\\thasUpvoted[msg.sender] = true;\\r\\n\\t\\tupvoteCount++;\\r\\n\\r\\n\\t\\temit Upvoted(msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\tfunction claimFunds() external nonReentrant {\\r\\n\\t\\trequire(isContributor(msg.sender), \\\"Not a contributor or author\\\");\\r\\n\\t\\tuint256 amount = unclaimedFunds[msg.sender];\\r\\n\\t\\trequire(amount > 0, \\\"No funds to claim\\\");\\r\\n\\r\\n\\t\\tif (totalReceivedFunds >= verificationThreshold) {\\r\\n\\t\\t\\trequire(\\r\\n\\t\\t\\t\\tisVerifiedAuthor(msg.sender),\\r\\n\\t\\t\\t\\t\\\"Author(s) needs to be verified!\\\"\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tunclaimedFunds[msg.sender] = 0;\\r\\n\\t\\tpayable(msg.sender).transfer(amount);\\r\\n\\r\\n\\t\\temit FundsClaimed(msg.sender, amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction distributeFunds(uint256 amount) internal {\\r\\n\\t\\tuint256 totalRecipients = contributors.length + authors.length;\\r\\n\\t\\tuint256 sharePerRecipient = amount.div(totalRecipients);\\r\\n\\r\\n\\t\\tfor (uint256 i = 0; i < contributors.length; i++) {\\r\\n\\t\\t\\tunclaimedFunds[contributors[i]] = unclaimedFunds[contributors[i]]\\r\\n\\t\\t\\t\\t.add(sharePerRecipient);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (uint256 i = 0; i < authors.length; i++) {\\r\\n\\t\\t\\tunclaimedFunds[authors[i]] = unclaimedFunds[authors[i]].add(\\r\\n\\t\\t\\t\\tsharePerRecipient\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\ttotalReceivedFunds = totalReceivedFunds.add(amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction isAuthor(address _address) public view returns (bool) {\\r\\n\\t\\tfor (uint i = 0; i < authors.length; i++) {\\r\\n\\t\\t\\tif (authors[i] == _address) {\\r\\n\\t\\t\\t\\treturn true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn false;\\r\\n\\t}\\r\\n\\r\\n\\tfunction isVerifiedAuthor(address _address) internal view returns (bool) {\\r\\n\\t\\treturn isAuthor(_address) && mainRegistry.isWalletVerified(_address);\\r\\n\\t}\\r\\n\\r\\n\\t//Contributors here are author+co-authors+contributors\\r\\n\\tfunction isContributor(address _address) public view returns (bool) {\\r\\n\\t\\t// Check in the contributors array\\r\\n\\t\\tfor (uint i = 0; i < contributors.length; i++) {\\r\\n\\t\\t\\tif (contributors[i] == _address) {\\r\\n\\t\\t\\t\\treturn true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Check if the address is an author\\r\\n\\t\\treturn isAuthor(_address);\\r\\n\\t}\\r\\n\\r\\n\\t//Any contributor can revoke his/her affiliation (only if not signed)\\r\\n\\tfunction revokeAffiliation() external {\\r\\n\\t\\trequire(isContributor(msg.sender), \\\"Not a contributor or author\\\");\\r\\n\\t\\trequire(!hasSigned[msg.sender], \\\"Cannot revoke after signing\\\");\\r\\n\\r\\n\\t\\tbool found = false;\\r\\n\\r\\n\\t\\t// Remove from contributors array\\r\\n\\t\\tfor (uint i = 0; i < contributors.length; i++) {\\r\\n\\t\\t\\tif (contributors[i] == msg.sender) {\\r\\n\\t\\t\\t\\tcontributors[i] = contributors[contributors.length - 1];\\r\\n\\t\\t\\t\\tcontributors.pop();\\r\\n\\t\\t\\t\\tfound = true;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// If not found in contributors, check in authors array\\r\\n\\t\\tif (!found) {\\r\\n\\t\\t\\tfor (uint i = 0; i < authors.length; i++) {\\r\\n\\t\\t\\t\\tif (authors[i] == msg.sender) {\\r\\n\\t\\t\\t\\t\\tauthors[i] = authors[authors.length - 1];\\r\\n\\t\\t\\t\\t\\tauthors.pop();\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Clear any unclaimed funds\\r\\n\\t\\tunclaimedFunds[msg.sender] = 0;\\r\\n\\r\\n\\t\\temit AffiliationRevoked(msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t// Getter functions for arrays\\r\\n\\tfunction getAuthors() external view returns (address[] memory) {\\r\\n\\t\\treturn authors;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getContributors() external view returns (address[] memory) {\\r\\n\\t\\treturn contributors;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getTags() external view returns (string[] memory) {\\r\\n\\t\\treturn tags;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getCoPublishers() external view returns (address[] memory) {\\r\\n\\t\\treturn coPublishers;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getQuotesAttestationIds()\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256[] memory)\\r\\n\\t{\\r\\n\\t\\treturn quotedAttestationId;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// #ATTESTATION FACTORY CONTRACT\\r\\ncontract AttestationFactory is Ownable {\\r\\n\\tMainRegistry public mainRegistry;\\r\\n\\tuint256 public _verificationThreshold = 0.05 ether;\\r\\n\\tmapping(address => bool) public authorizedAddresses;\\r\\n\\r\\n\\tevent AttestationCreated(\\r\\n\\t\\taddress indexed attestationAddress,\\r\\n\\t\\taddress[] authors,\\r\\n\\t\\taddress[] contributors\\r\\n\\t);\\r\\n\\tevent VerificationThresholdUpdated(\\r\\n\\t\\tuint256 oldThreshold,\\r\\n\\t\\tuint256 newThreshold\\r\\n\\t);\\r\\n\\tevent AuthorizedAddressAdded(address indexed newAuthorized);\\r\\n\\tevent AuthorizedAddressRemoved(address indexed removedAuthorized);\\r\\n\\r\\n\\tconstructor(address _mainRegistryAddress) {\\r\\n\\t\\tmainRegistry = MainRegistry(_mainRegistryAddress);\\r\\n        authorizedAddresses[msg.sender] = true;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyAuthorized() {\\r\\n\\t\\trequire(authorizedAddresses[msg.sender], \\\"Not authorized\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setVerificationThreshold(\\r\\n\\t\\tuint256 newThreshold\\r\\n\\t) external onlyAuthorized {\\r\\n\\t\\tuint256 oldThreshold = _verificationThreshold;\\r\\n\\t\\t_verificationThreshold = newThreshold;\\r\\n\\t\\temit VerificationThresholdUpdated(oldThreshold, newThreshold);\\r\\n\\t}\\r\\n\\r\\n\\tfunction addAuthorizedAddress(address newAuthorized) external onlyOwner {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t!authorizedAddresses[newAuthorized],\\r\\n\\t\\t\\t\\\"Address already authorized\\\"\\r\\n\\t\\t);\\r\\n\\t\\tauthorizedAddresses[newAuthorized] = true;\\r\\n\\t\\temit AuthorizedAddressAdded(newAuthorized);\\r\\n\\t}\\r\\n\\r\\n\\tfunction removeAuthorizedAddress(\\r\\n\\t\\taddress authorizedToRemove\\r\\n\\t) external onlyOwner {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tauthorizedAddresses[authorizedToRemove],\\r\\n\\t\\t\\t\\\"Address not authorized\\\"\\r\\n\\t\\t);\\r\\n\\t\\tauthorizedAddresses[authorizedToRemove] = false;\\r\\n\\t\\temit AuthorizedAddressRemoved(authorizedToRemove);\\r\\n\\t}\\r\\n\\r\\n\\tfunction createAttestation(\\r\\n\\t\\taddress[] memory _authors,\\r\\n\\t\\taddress[] memory _contributors,\\r\\n\\t\\tstring memory _ipfsHash,\\r\\n\\t\\tuint256[] memory _quotedAttestationId,\\r\\n\\t\\tstring[] memory _tags,\\r\\n\\t\\tuint256 _coPublishThreshold\\r\\n\\t) external returns (address) {\\r\\n\\t\\tAttestation newAttestation = new Attestation(\\r\\n\\t\\t\\taddress(mainRegistry),\\r\\n\\t\\t\\t_authors,\\r\\n\\t\\t\\t_contributors,\\r\\n\\t\\t\\t_ipfsHash,\\r\\n\\t\\t\\t_quotedAttestationId,\\r\\n\\t\\t\\t_tags,\\r\\n\\t\\t\\t_coPublishThreshold,\\r\\n\\t\\t\\t_verificationThreshold\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\taddress attestationAddress = address(newAttestation);\\r\\n\\r\\n\\t\\taddress[] memory allParticipants = new address[](\\r\\n\\t\\t\\t_authors.length + _contributors.length\\r\\n\\t\\t);\\r\\n\\t\\tfor (uint i = 0; i < _authors.length; i++) {\\r\\n\\t\\t\\tallParticipants[i] = _authors[i];\\r\\n\\t\\t}\\r\\n\\t\\tfor (uint i = 0; i < _contributors.length; i++) {\\r\\n\\t\\t\\tallParticipants[_authors.length + i] = _contributors[i];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Ensure all participants are registered in the MainRegistry\\r\\n\\t\\tfor (uint i = 0; i < allParticipants.length; i++) {\\r\\n\\t\\t\\tif (mainRegistry.walletToUserId(allParticipants[i]) == 0) {\\r\\n\\t\\t\\t\\t// If the wallet is not associated with any user, create a new user with an empty username\\r\\n\\t\\t\\t\\tmainRegistry.registerUser(\\\"\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tmainRegistry.addAttestation(attestationAddress, allParticipants);\\r\\n\\t\\temit AttestationCreated(attestationAddress, _authors, _contributors);\\r\\n\\t\\treturn attestationAddress;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xe1012314f5d7585e18ff57e909a83f81084c67779252ce1b6b18f68c1cf7905f\",\"license\":\"MIT\"},\"contracts/MainRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\ncontract MainRegistry {\\r\\n\\tusing Counters for Counters.Counter;\\r\\n\\tCounters.Counter private _attestationIds;\\r\\n\\tCounters.Counter private _userIds;\\r\\n\\r\\n\\tstruct WalletAddress {\\r\\n\\t\\taddress userAddress;\\r\\n\\t\\tuint256[] attestationIds;\\r\\n\\t\\tbool isVerified;\\r\\n\\t}\\r\\n\\r\\n\\tstruct UserProfile {\\r\\n\\t\\tuint256 userId;\\r\\n\\t\\tstring userName;\\r\\n\\t\\taddress[] wallets;\\r\\n\\t}\\r\\n\\r\\n\\taddress public owner;\\r\\n\\tmapping(address => bool) public authorizedAddresses;\\r\\n\\tmapping(uint256 => UserProfile) public users; // userId -> UserProfile\\r\\n\\tmapping(address => uint256) public walletToUserId; // wallet -> userId\\r\\n\\tmapping(address => WalletAddress) public wallets; // wallet -> WalletAddress\\r\\n\\tmapping(uint256 => address) public attestationAddresses;\\r\\n\\r\\n\\tuint256 public constant MAX_ATTESTATIONS_PER_WALLET = 100; // Example limit\\r\\n\\r\\n\\tmodifier onlyOwner() {\\r\\n\\t\\trequire(msg.sender == owner, \\\"Only the owner can perform this action\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyAuthorized() {\\r\\n\\t\\trequire(authorizedAddresses[msg.sender], \\\"Not authorized\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tevent UserRegistered(uint256 indexed userId, string userName);\\r\\n\\tevent WalletAdded(uint256 indexed userId, address indexed wallet);\\r\\n\\tevent AttestationCreated(\\r\\n\\t\\tuint256 indexed attestationId,\\r\\n\\t\\taddress attestationAddress\\r\\n\\t);\\r\\n\\tevent AttestationAddedToWallet(\\r\\n\\t\\taddress indexed wallet,\\r\\n\\t\\tuint256 attestationId\\r\\n\\t);\\r\\n\\tevent UserNameUpdated(uint256 indexed userId, string newUserName);\\r\\n\\tevent WalletVerified(address indexed wallet);\\r\\n\\r\\n\\tconstructor(address _owner) {\\r\\n\\t\\towner = _owner;\\r\\n\\t\\tauthorizedAddresses[owner] = true;\\r\\n\\r\\n\\t\\t_userIds.increment();\\r\\n\\t\\tuint256 newUserId = _userIds.current();\\r\\n\\t\\tusers[newUserId] = UserProfile({\\r\\n\\t\\t\\tuserId: newUserId,\\r\\n\\t\\t\\tuserName: \\\"p0nk\\\",\\r\\n\\t\\t\\twallets: new address[](0)\\r\\n\\t\\t});\\r\\n\\t\\t_addWalletToUser(newUserId, _owner);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _addWalletToUser(uint256 _userId, address _wallet) private {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\twalletToUserId[_wallet] == 0,\\r\\n\\t\\t\\t\\\"Wallet already associated with a user\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tusers[_userId].wallets.push(_wallet);\\r\\n\\t\\twalletToUserId[_wallet] = _userId;\\r\\n\\t\\twallets[_wallet] = WalletAddress({\\r\\n\\t\\t\\tuserAddress: _wallet,\\r\\n\\t\\t\\tattestationIds: new uint256[](0),\\r\\n\\t\\t\\tisVerified: false\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\temit WalletAdded(_userId, _wallet);\\r\\n\\t}\\r\\n\\r\\n\\tfunction registerUser(\\r\\n\\t\\tstring memory _userName\\r\\n\\t) external onlyAuthorized returns (uint256) {\\r\\n\\t\\tif (walletToUserId[msg.sender] != 0) {\\r\\n\\t\\t\\t// User already registered, return existing userId\\r\\n\\t\\t\\treturn walletToUserId[msg.sender];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t_userIds.increment();\\r\\n\\t\\tuint256 newUserId = _userIds.current();\\r\\n\\t\\tusers[newUserId] = UserProfile({\\r\\n\\t\\t\\tuserId: newUserId,\\r\\n\\t\\t\\tuserName: _userName,\\r\\n\\t\\t\\twallets: new address[](0)\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\t_addWalletToUser(newUserId, msg.sender);\\r\\n\\r\\n\\t\\temit UserRegistered(newUserId, _userName);\\r\\n\\t\\treturn newUserId;\\r\\n\\t}\\r\\n\\r\\n\\tfunction addWalletToUser(address _newWallet) external onlyAuthorized {\\r\\n\\t\\tuint256 userId = walletToUserId[msg.sender];\\r\\n\\t\\trequire(userId != 0, \\\"User not registered\\\");\\r\\n\\t\\t_addWalletToUser(userId, _newWallet);\\r\\n\\t}\\r\\n\\r\\n\\tfunction addAuthorizedAddress(address _address) external onlyOwner {\\r\\n\\t\\tauthorizedAddresses[_address] = true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction removeAuthorizedAddress(address _address) external onlyOwner {\\r\\n\\t\\tauthorizedAddresses[_address] = false;\\r\\n\\t}\\r\\n\\r\\n\\tfunction verifyWallet(address _wallet) external onlyAuthorized {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\twalletToUserId[_wallet] != 0,\\r\\n\\t\\t\\t\\\"Wallet not associated with any user\\\"\\r\\n\\t\\t);\\r\\n\\t\\twallets[_wallet].isVerified = true;\\r\\n\\t\\temit WalletVerified(_wallet);\\r\\n\\t}\\r\\n\\r\\n\\tfunction isWalletVerified(address _wallet) public view returns (bool) {\\r\\n\\t\\treturn wallets[_wallet].isVerified;\\r\\n\\t}\\r\\n\\r\\n\\tfunction addAttestation(\\r\\n\\t\\taddress _attestationAddress,\\r\\n\\t\\taddress[] memory _participants\\r\\n\\t) external onlyAuthorized {\\r\\n\\t\\t_attestationIds.increment();\\r\\n\\t\\tuint256 _newAttestationId = _attestationIds.current();\\r\\n\\t\\tattestationAddresses[_newAttestationId] = _attestationAddress;\\r\\n\\r\\n\\t\\tfor (uint i = 0; i < _participants.length; i++) {\\r\\n\\t\\t\\taddress wallet = _participants[i];\\r\\n\\t\\t\\tWalletAddress storage walletAddr = wallets[wallet];\\r\\n\\t\\t\\trequire(\\r\\n\\t\\t\\t\\twalletAddr.attestationIds.length < MAX_ATTESTATIONS_PER_WALLET,\\r\\n\\t\\t\\t\\t\\\"Max attestations reached for this wallet\\\"\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\twalletAddr.attestationIds.push(_newAttestationId);\\r\\n\\t\\t\\temit AttestationAddedToWallet(wallet, _newAttestationId);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit AttestationCreated(_newAttestationId, _attestationAddress);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateUserName(string memory _newUserName) external {\\r\\n\\t\\trequire(bytes(_newUserName).length > 0, \\\"Username cannot be empty\\\");\\r\\n\\t\\tuint256 userId = walletToUserId[msg.sender];\\r\\n\\t\\trequire(userId != 0, \\\"User not registered\\\");\\r\\n\\r\\n\\t\\t// Ensure the caller is associated with this user account\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tusers[userId].wallets.length > 0,\\r\\n\\t\\t\\t\\\"No wallets associated with this user\\\"\\r\\n\\t\\t);\\r\\n\\t\\tbool isAuthorized = false;\\r\\n\\t\\tfor (uint i = 0; i < users[userId].wallets.length; i++) {\\r\\n\\t\\t\\tif (users[userId].wallets[i] == msg.sender) {\\r\\n\\t\\t\\t\\tisAuthorized = true;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\trequire(isAuthorized, \\\"Not authorized to update this user's name\\\");\\r\\n\\r\\n\\t\\tusers[userId].userName = _newUserName;\\r\\n\\t\\temit UserNameUpdated(userId, _newUserName);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getAttestationCount() external view returns (uint256) {\\r\\n\\t\\treturn _attestationIds.current();\\r\\n\\t}\\r\\n\\r\\n\\tfunction getWalletAttestations(\\r\\n\\t\\taddress _wallet,\\r\\n\\t\\tuint256 _offset,\\r\\n\\t\\tuint256 _limit\\r\\n\\t) public view returns (uint256[] memory attestationIds) {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\twalletToUserId[_wallet] != 0,\\r\\n\\t\\t\\t\\\"Wallet not associated with any user\\\"\\r\\n\\t\\t);\\r\\n\\t\\tWalletAddress storage walletAddr = wallets[_wallet];\\r\\n\\t\\tuint256[] storage allAttestations = walletAddr.attestationIds;\\r\\n\\t\\tuint256 total = allAttestations.length;\\r\\n\\r\\n\\t\\trequire(_offset < total, \\\"Offset out of bounds\\\");\\r\\n\\r\\n\\t\\tuint256 end = _offset + _limit > total ? total : _offset + _limit;\\r\\n\\t\\tuint256 length = end - _offset;\\r\\n\\r\\n\\t\\tattestationIds = new uint256[](length);\\r\\n\\t\\tfor (uint256 i = 0; i < length; i++) {\\r\\n\\t\\t\\tattestationIds[i] = allAttestations[_offset + i];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn attestationIds;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getWalletAttestationCount(\\r\\n\\t\\taddress _wallet\\r\\n\\t) public view returns (uint256) {\\r\\n\\t\\treturn wallets[_wallet].attestationIds.length;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserName(\\r\\n\\t\\taddress _wallet\\r\\n\\t) external view returns (string memory) {\\r\\n\\t\\tuint256 userId = walletToUserId[_wallet];\\r\\n\\t\\trequire(userId != 0, \\\"User not registered\\\");\\r\\n\\t\\treturn users[userId].userName;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserWallets(\\r\\n\\t\\tuint256 _userId\\r\\n\\t) public view returns (address[] memory) {\\r\\n\\t\\trequire(users[_userId].userId != 0, \\\"User does not exist\\\");\\r\\n\\t\\treturn users[_userId].wallets;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x3d788a82abce1231df9dd99961df6de1db62623327f0e4d374205e17aaf39c39\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405266b1a2bc2ec5000060025534801561001b57600080fd5b506040516131a03803806131a083398101604081905261003a916100d2565b61004333610082565b600180546001600160a01b0319166001600160a01b0392909216919091178155336000908152600360205260409020805460ff19169091179055610102565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100e457600080fd5b81516001600160a01b03811681146100fb57600080fd5b9392505050565b61308f806101116000396000f3fe60806040523480156200001157600080fd5b5060043610620000ab5760003560e01c8063715018a6116200006e578063715018a614620001415780638da5cb5b146200014b578063df41df5e146200015d578063f19e207e1462000174578063f2fde38b14620001ab57600080fd5b8063040fcdb814620000b057806338cc32c414620000cd57806342f1181e14620000e657806355da3dd714620000fd57806370712939146200012a575b600080fd5b620000ba60025481565b6040519081526020015b60405180910390f35b620000e4620000de366004620008d1565b620001c2565b005b620000e4620000f736600462000908565b6200025d565b60015462000111906001600160a01b031681565b6040516001600160a01b039091168152602001620000c4565b620000e46200013b36600462000908565b6200031e565b620000e4620003d4565b6000546001600160a01b031662000111565b620001116200016e36600462000b7d565b620003ec565b6200019a6200018536600462000908565b60036020526000908152604090205460ff1681565b6040519015158152602001620000c4565b620000e4620001bc36600462000908565b62000798565b3360009081526003602052604090205460ff16620002185760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064015b60405180910390fd5b600280549082905560408051828152602081018490527f64f30c20f1b54bf3f4123915fdb7c86db11cbdf94a186e56552678e6d7b5d19a910160405180910390a15050565b6200026762000817565b6001600160a01b03811660009081526003602052604090205460ff1615620002d25760405162461bcd60e51b815260206004820152601a60248201527f4164647265737320616c726561647920617574686f72697a656400000000000060448201526064016200020f565b6001600160a01b038116600081815260036020526040808220805460ff19166001179055517f10ac961f00d5e732ba4dcc2c6fb09bebea0eb9edd2a75c8109775ef288382e679190a250565b6200032862000817565b6001600160a01b03811660009081526003602052604090205460ff166200038b5760405162461bcd60e51b81526020600482015260166024820152751059191c995cdcc81b9bdd08185d5d1a1bdc9a5e995960521b60448201526064016200020f565b6001600160a01b038116600081815260036020526040808220805460ff19169055517f66d5f06f711af3c9feba3203fdb00b51345d514c68585d9d319c5ff5e6f775929190a250565b620003de62000817565b620003ea600062000873565b565b600080600160009054906101000a90046001600160a01b03168888888888886002546040516200041c90620008c3565b6200042f98979695949392919062000d51565b604051809103906000f0801580156200044c573d6000803e3d6000fd5b50875189519192508291600091620004649162000e23565b67ffffffffffffffff8111156200047f576200047f6200092d565b604051908082528060200260200182016040528015620004a9578160200160208202803683370190505b50905060005b8a5181101562000518578a8181518110620004ce57620004ce62000e3f565b6020026020010151828281518110620004eb57620004eb62000e3f565b6001600160a01b0390921660209283029190910190910152806200050f8162000e55565b915050620004af565b5060005b895181101562000593578981815181106200053b576200053b62000e3f565b602002602001015182828d5162000553919062000e23565b8151811062000566576200056662000e3f565b6001600160a01b0390921660209283029190910190910152806200058a8162000e55565b9150506200051c565b5060005b8151811015620006dd5760015482516001600160a01b0390911690634bb5438490849084908110620005cd57620005cd62000e3f565b60200260200101516040518263ffffffff1660e01b81526004016200060191906001600160a01b0391909116815260200190565b602060405180830381865afa1580156200061f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000645919062000e71565b600003620006c857600154604051631c13c6e560e21b815260206004820152600060248201526001600160a01b039091169063704f1b94906044016020604051808303816000875af1158015620006a0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006c6919062000e71565b505b80620006d48162000e55565b91505062000597565b5060015460405163cafadbb960e01b81526001600160a01b039091169063cafadbb99062000712908590859060040162000e8b565b600060405180830381600087803b1580156200072d57600080fd5b505af115801562000742573d6000803e3d6000fd5b50505050816001600160a01b03167fdfbdc22c0386fd3c36c2108578c2cf505c0aa9d398e487d4c609bfe9a23cbdc98b8b6040516200078392919062000eb9565b60405180910390a25098975050505050505050565b620007a262000817565b6001600160a01b038116620008095760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200020f565b620008148162000873565b50565b6000546001600160a01b03163314620003ea5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200020f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61216e8062000eec83390190565b600060208284031215620008e457600080fd5b5035919050565b80356001600160a01b03811681146200090357600080fd5b919050565b6000602082840312156200091b57600080fd5b6200092682620008eb565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156200096f576200096f6200092d565b604052919050565b600067ffffffffffffffff8211156200099457620009946200092d565b5060051b60200190565b600082601f830112620009b057600080fd5b81356020620009c9620009c38362000977565b62000943565b82815260059290921b84018101918181019086841115620009e957600080fd5b8286015b8481101562000a0f5762000a0181620008eb565b8352918301918301620009ed565b509695505050505050565b600082601f83011262000a2c57600080fd5b813567ffffffffffffffff81111562000a495762000a496200092d565b62000a5e601f8201601f191660200162000943565b81815284602083860101111562000a7457600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011262000aa357600080fd5b8135602062000ab6620009c38362000977565b82815260059290921b8401810191818101908684111562000ad657600080fd5b8286015b8481101562000a0f578035835291830191830162000ada565b600082601f83011262000b0557600080fd5b8135602062000b18620009c38362000977565b82815260059290921b8401810191818101908684111562000b3857600080fd5b8286015b8481101562000a0f57803567ffffffffffffffff81111562000b5e5760008081fd5b62000b6e8986838b010162000a1a565b84525091830191830162000b3c565b60008060008060008060c0878903121562000b9757600080fd5b863567ffffffffffffffff8082111562000bb057600080fd5b62000bbe8a838b016200099e565b9750602089013591508082111562000bd557600080fd5b62000be38a838b016200099e565b9650604089013591508082111562000bfa57600080fd5b62000c088a838b0162000a1a565b9550606089013591508082111562000c1f57600080fd5b62000c2d8a838b0162000a91565b9450608089013591508082111562000c4457600080fd5b5062000c5389828a0162000af3565b92505060a087013590509295509295509295565b600081518084526020808501945080840160005b8381101562000ca25781516001600160a01b03168752958201959082019060010162000c7b565b509495945050505050565b6000815180845260005b8181101562000cd55760208185018101518683018201520162000cb7565b506000602082860101526020601f19601f83011685010191505092915050565b600082825180855260208086019550808260051b84010181860160005b8481101562000d4457601f1986840301895262000d3183835162000cad565b9884019892509083019060010162000d12565b5090979650505050505050565b6001600160a01b038916815261010060208083018290526000919062000d7a8483018c62000c67565b9150838203604085015262000d90828b62000c67565b9150838203606085015262000da6828a62000cad565b84810360808601528851808252828a0193509082019060005b8181101562000ddd5784518352938301939183019160010162000dbf565b505084810360a086015262000df3818962000cf5565b60c08601979097525050505060e001529695505050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111562000e395762000e3962000e0d565b92915050565b634e487b7160e01b600052603260045260246000fd5b60006001820162000e6a5762000e6a62000e0d565b5060010190565b60006020828403121562000e8457600080fd5b5051919050565b6001600160a01b038316815260406020820181905260009062000eb19083018462000c67565b949350505050565b60408152600062000ece604083018562000c67565b828103602084015262000ee2818562000c67565b9594505050505056fe60806040523480156200001157600080fd5b506040516200216e3803806200216e833981016040819052620000349162000634565b6001600081905580546001600160a01b0319166001600160a01b038a161790558651620000699060029060208a019062000239565b5085516200007f90600390602089019062000239565b5060046200008e8682620007ca565b508351620000a4906005906020870190620002a3565b508251620000ba906006906020860190620002e1565b506007829055600881905560028054620000fc9190600090620000e157620000e162000896565b6000918252602090912001546001600160a01b03166200010a565b5050505050505050620008fa565b6001600160a01b03811660009081526009602052604090205460ff1615620001785760405162461bcd60e51b815260206004820152601a60248201527f417574686f722068617320616c7265616479207369676e65642e000000000000604482015260640160405180910390fd5b6001600160a01b0381166000908152600960205260408120805460ff19166001179055600a805491620001ab83620008c2565b9091555050600254600354620001c29190620008de565b600a54036200020257600b805460ff191660011790556040517f49ab2c33d6aa0d5732af0c373636e337a25a80ab9e6961359356cd9df689e80990600090a15b6040516001600160a01b038216907f55e089ae85f06da415f9041aa8a5c03313aebb8f346b25859b3127057819829290600090a250565b82805482825590600052602060002090810192821562000291579160200282015b828111156200029157825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200025a565b506200029f9291506200033a565b5090565b82805482825590600052602060002090810192821562000291579160200282015b8281111562000291578251825591602001919060010190620002c4565b8280548282559060005260206000209081019282156200032c579160200282015b828111156200032c57825182906200031b9082620007ca565b509160200191906001019062000302565b506200029f92915062000351565b5b808211156200029f57600081556001016200033b565b808211156200029f57600062000368828262000372565b5060010162000351565b50805462000380906200073b565b6000825580601f1062000391575050565b601f016020900490600052602060002090810190620003b191906200033a565b50565b80516001600160a01b0381168114620003cc57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620004125762000412620003d1565b604052919050565b60006001600160401b03821115620004365762000436620003d1565b5060051b60200190565b600082601f8301126200045257600080fd5b815160206200046b62000465836200041a565b620003e7565b82815260059290921b840181019181810190868411156200048b57600080fd5b8286015b84811015620004b157620004a381620003b4565b83529183019183016200048f565b509695505050505050565b600082601f830112620004ce57600080fd5b81516001600160401b03811115620004ea57620004ea620003d1565b602062000500601f8301601f19168201620003e7565b82815285828487010111156200051557600080fd5b60005b838110156200053557858101830151828201840152820162000518565b506000928101909101919091529392505050565b600082601f8301126200055b57600080fd5b815160206200056e62000465836200041a565b82815260059290921b840181019181810190868411156200058e57600080fd5b8286015b84811015620004b1578051835291830191830162000592565b600082601f830112620005bd57600080fd5b81516020620005d062000465836200041a565b82815260059290921b84018101918181019086841115620005f057600080fd5b8286015b84811015620004b15780516001600160401b03811115620006155760008081fd5b620006258986838b0101620004bc565b845250918301918301620005f4565b600080600080600080600080610100898b0312156200065257600080fd5b6200065d89620003b4565b60208a01519098506001600160401b03808211156200067b57600080fd5b620006898c838d0162000440565b985060408b0151915080821115620006a057600080fd5b620006ae8c838d0162000440565b975060608b0151915080821115620006c557600080fd5b620006d38c838d01620004bc565b965060808b0151915080821115620006ea57600080fd5b620006f88c838d0162000549565b955060a08b01519150808211156200070f57600080fd5b506200071e8b828c01620005ab565b60c08b015160e0909b0151999c989b509699959894979350505050565b600181811c908216806200075057607f821691505b6020821081036200077157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620007c557600081815260208120601f850160051c81016020861015620007a05750805b601f850160051c820191505b81811015620007c157828155600101620007ac565b5050505b505050565b81516001600160401b03811115620007e657620007e6620003d1565b620007fe81620007f784546200073b565b8462000777565b602080601f8311600181146200083657600084156200081d5750858301515b600019600386901b1c1916600185901b178555620007c1565b600085815260208120601f198616915b82811015620008675788860151825594840194600190910190840162000846565b5085821015620008865787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201620008d757620008d7620008ac565b5060010190565b80820180821115620008f457620008f4620008ac565b92915050565b611864806200090a6000396000f3fe6080604052600436106101cd5760003560e01c806392d7727c116100f7578063c623674f11610095578063efe071d611610064578063efe071d61461050e578063f14faf6f1461052e578063f613c87114610541578063f69197eb1461057157600080fd5b8063c623674f146104ad578063d4b12530146104c2578063e7f55ed6146104e2578063ea10b231146104f857600080fd5b8063af157c19116100d1578063af157c191461040b578063ba788a1414610420578063bce248cb14610450578063bf6a14131461047d57600080fd5b806392d7727c146103bf578063995d9ab7146103d4578063ac307773146103f657600080fd5b80633cb5d1001161016f5780636dd85b191161013e5780636dd85b191461035d5780637fc622f41461037f5780638361e036146103945780638d1e829b146103a957600080fd5b80633cb5d100146102cb5780633db804da146103035780634a8c1fb41461032357806355da3dd71461033d57600080fd5b80631d0d35f5116101ab5780631d0d35f5146102375780631d1b52361461026757806320822abc146102875780632ca15122146102b457600080fd5b806305fd1ae0146101d2578063167feb09146101fd578063197aecb114610221575b600080fd5b3480156101de57600080fd5b506101e7610591565b6040516101f491906115ad565b60405180910390f35b34801561020957600080fd5b5061021360085481565b6040519081526020016101f4565b34801561022d57600080fd5b5061021360105481565b34801561024357600080fd5b506102576102523660046115f1565b6105e9565b60405190151581526020016101f4565b34801561027357600080fd5b5061021361028236600461161a565b610659565b34801561029357600080fd5b506102a76102a236600461161a565b61067a565b6040516101f49190611679565b3480156102c057600080fd5b506102c9610726565b005b3480156102d757600080fd5b506102eb6102e636600461161a565b6107d2565b6040516001600160a01b0390911681526020016101f4565b34801561030f57600080fd5b506102eb61031e36600461161a565b6107fc565b34801561032f57600080fd5b50600b546102579060ff1681565b34801561034957600080fd5b506001546102eb906001600160a01b031681565b34801561036957600080fd5b5061037261080c565b6040516101f4919061168c565b34801561038b57600080fd5b5061037261086d565b3480156103a057600080fd5b506102c96108cd565b3480156103b557600080fd5b50610213600e5481565b3480156103cb57600080fd5b506102c9610bda565b3480156103e057600080fd5b506103e9610c86565b6040516101f491906116cd565b34801561040257600080fd5b506102c9610d5f565b34801561041757600080fd5b50610372610ee9565b34801561042c57600080fd5b5061025761043b3660046115f1565b600f6020526000908152604090205460ff1681565b34801561045c57600080fd5b5061021361046b3660046115f1565b60116020526000908152604090205481565b34801561048957600080fd5b506102576104983660046115f1565b60096020526000908152604090205460ff1681565b3480156104b957600080fd5b506102a7610f49565b3480156104ce57600080fd5b506102576104dd3660046115f1565b610f56565b3480156104ee57600080fd5b50610213600a5481565b34801561050457600080fd5b5061021360075481565b34801561051a57600080fd5b506102eb61052936600461161a565b610fbf565b6102c961053c36600461161a565b610fcf565b34801561054d57600080fd5b5061025761055c3660046115f1565b600c6020526000908152604090205460ff1681565b34801561057d57600080fd5b506102c961058c36600461161a565b61115a565b606060058054806020026020016040519081016040528092919081815260200182805480156105df57602002820191906000526020600020905b8154815260200190600101908083116105cb575b5050505050905090565b6000805b60035481101561064957826001600160a01b0316600382815481106106145761061461172f565b6000918252602090912001546001600160a01b0316036106375750600192915050565b806106418161175b565b9150506105ed565b5061065382610f56565b92915050565b6005818154811061066957600080fd5b600091825260209091200154905081565b6006818154811061068a57600080fd5b9060005260206000200160009150905080546106a590611774565b80601f01602080910402602001604051908101604052809291908181526020018280546106d190611774565b801561071e5780601f106106f35761010080835404028352916020019161071e565b820191906000526020600020905b81548152906001019060200180831161070157829003601f168201915b505050505081565b600b5460ff161561077e5760405162461bcd60e51b815260206004820152601d60248201527f4174746573746174696f6e20616c72656164792061637469766174656400000060448201526064015b60405180910390fd5b610787336105e9565b6107c75760405162461bcd60e51b81526020600482015260116024820152702737ba10309031b7b73a3934b13aba37b960791b6044820152606401610775565b6107d033611240565b565b600381815481106107e257600080fd5b6000918252602090912001546001600160a01b0316905081565b600281815481106107e257600080fd5b6060600d8054806020026020016040519081016040528092919081815260200182805480156105df57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610846575050505050905090565b606060028054806020026020016040519081016040528092919081815260200182805480156105df576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610846575050505050905090565b6108d6336105e9565b6109225760405162461bcd60e51b815260206004820152601b60248201527f4e6f74206120636f6e7472696275746f72206f7220617574686f7200000000006044820152606401610775565b3360009081526009602052604090205460ff16156109825760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f74207265766f6b65206166746572207369676e696e6700000000006044820152606401610775565b6000805b600354811015610a8f57336001600160a01b0316600382815481106109ad576109ad61172f565b6000918252602090912001546001600160a01b031603610a7d57600380546109d7906001906117ae565b815481106109e7576109e761172f565b600091825260209091200154600380546001600160a01b039092169183908110610a1357610a1361172f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506003805480610a5257610a526117c1565b600082815260209020810160001990810180546001600160a01b031916905501905560019150610a8f565b80610a878161175b565b915050610986565b5080610b9f5760005b600254811015610b9d57336001600160a01b031660028281548110610abf57610abf61172f565b6000918252602090912001546001600160a01b031603610b8b5760028054610ae9906001906117ae565b81548110610af957610af961172f565b600091825260209091200154600280546001600160a01b039092169183908110610b2557610b2561172f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506002805480610b6457610b646117c1565b600082815260209020810160001990810180546001600160a01b0319169055019055610b9d565b80610b958161175b565b915050610a98565b505b33600081815260116020526040808220829055517f63c343245a29ba32126097ef0590bb182cd477568bd2a4daf57e3f137e011bf49190a250565b336000908152600f602052604090205460ff1615610c2c5760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481d5c1d9bdd1959608a1b6044820152606401610775565b336000908152600f60205260408120805460ff19166001179055600e805491610c548361175b565b909155505060405133907f261adcc11df584b1e56db3dba253410bb208b17821e3b351cbacb117cea2292690600090a2565b60606006805480602002602001604051908101604052809291908181526020016000905b82821015610d56578382906000526020600020018054610cc990611774565b80601f0160208091040260200160405190810160405280929190818152602001828054610cf590611774565b8015610d425780601f10610d1757610100808354040283529160200191610d42565b820191906000526020600020905b815481529060010190602001808311610d2557829003601f168201915b505050505081526020019060010190610caa565b50505050905090565b610d67611365565b610d70336105e9565b610dbc5760405162461bcd60e51b815260206004820152601b60248201527f4e6f74206120636f6e7472696275746f72206f7220617574686f7200000000006044820152606401610775565b3360009081526011602052604090205480610e0d5760405162461bcd60e51b81526020600482015260116024820152704e6f2066756e647320746f20636c61696d60781b6044820152606401610775565b60085460105410610e6d57610e21336113be565b610e6d5760405162461bcd60e51b815260206004820152601f60248201527f417574686f72287329206e6565647320746f20626520766572696669656421006044820152606401610775565b336000818152601160205260408082208290555183156108fc0291849190818181858888f19350505050158015610ea8573d6000803e3d6000fd5b5060405181815233907fa65a8b4f7f65a1063243d7f7e9e4da00ff767599acf21549ef2548a45d1695ae9060200160405180910390a2506107d06001600055565b606060038054806020026020016040519081016040528092919081815260200182805480156105df576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610846575050505050905090565b600480546106a590611774565b6000805b600254811015610fb657826001600160a01b031660028281548110610f8157610f8161172f565b6000918252602090912001546001600160a01b031603610fa45750600192915050565b80610fae8161175b565b915050610f5a565b50600092915050565b600d81815481106107e257600080fd5b8034146110315760405162461bcd60e51b815260206004820152602a60248201527f53656e742076616c756520646f6573206e6f74206d61746368207370656369666044820152691a595908185b5bdd5b9d60b21b6064820152608401610775565b600081116110715760405162461bcd60e51b815260206004820152600d60248201526c139bc8199d5b991cc81cd95b9d609a1b6044820152606401610775565b61107a8161143e565b60405181815233907f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f9060200160405180910390a260075481101580156110d15750336000908152600c602052604090205460ff16155b1561115757336000818152600c6020526040808220805460ff19166001908117909155600d8054918201815583527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b03191684179055517f17315e8a7842b7b3653b07d725976cf9ea9b7460f9cc3e721b7d72578cf358fa9190a25b50565b61116333610f56565b61119f5760405162461bcd60e51b815260206004820152600d60248201526c2737ba1030b71020baba3437b960991b6044820152606401610775565b600081116111fb5760405162461bcd60e51b815260206004820152602360248201527f5468726573686f6c64206d7573742062652067726561746572207468616e207a60448201526265726f60e81b6064820152608401610775565b600780549082905560408051828152602081018490527f942de8ef2cd89c2657df40444970b9e9f6dda6f481c9ca0db5a78382cbffe310910160405180910390a15050565b6001600160a01b03811660009081526009602052604090205460ff16156112a95760405162461bcd60e51b815260206004820152601a60248201527f417574686f722068617320616c7265616479207369676e65642e0000000000006044820152606401610775565b6001600160a01b0381166000908152600960205260408120805460ff19166001179055600a8054916112da8361175b565b90915550506002546003546112ef91906117d7565b600a540361132e57600b805460ff191660011790556040517f49ab2c33d6aa0d5732af0c373636e337a25a80ab9e6961359356cd9df689e80990600090a15b6040516001600160a01b038216907f55e089ae85f06da415f9041aa8a5c03313aebb8f346b25859b3127057819829290600090a250565b6002600054036113b75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610775565b6002600055565b60006113c982610f56565b80156106535750600154604051631fddb5c760e21b81526001600160a01b03848116600483015290911690637f76d71c90602401602060405180830381865afa15801561141a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065391906117ea565b600254600354600091611450916117d7565b9050600061145e838361158e565b905060005b600354811015611501576114b38260116000600385815481106114885761148861172f565b60009182526020808320909101546001600160a01b03168352820192909252604001902054906115a1565b60116000600384815481106114ca576114ca61172f565b60009182526020808320909101546001600160a01b03168352820192909252604001902055806114f98161175b565b915050611463565b5060005b6002548110156115785761152a8260116000600285815481106114885761148861172f565b60116000600284815481106115415761154161172f565b60009182526020808320909101546001600160a01b03168352820192909252604001902055806115708161175b565b915050611505565b5060105461158690846115a1565b601055505050565b600061159a828461180c565b9392505050565b600061159a82846117d7565b6020808252825182820181905260009190848201906040850190845b818110156115e5578351835292840192918401916001016115c9565b50909695505050505050565b60006020828403121561160357600080fd5b81356001600160a01b038116811461159a57600080fd5b60006020828403121561162c57600080fd5b5035919050565b6000815180845260005b818110156116595760208185018101518683018201520161163d565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061159a6020830184611633565b6020808252825182820181905260009190848201906040850190845b818110156115e55783516001600160a01b0316835292840192918401916001016116a8565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561172257603f19888603018452611710858351611633565b945092850192908501906001016116f4565b5092979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161176d5761176d611745565b5060010190565b600181811c9082168061178857607f821691505b6020821081036117a857634e487b7160e01b600052602260045260246000fd5b50919050565b8181038181111561065357610653611745565b634e487b7160e01b600052603160045260246000fd5b8082018082111561065357610653611745565b6000602082840312156117fc57600080fd5b8151801515811461159a57600080fd5b60008261182957634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220cbf907e0f7728e0d3dbb583a2d6e707d926a0dde4bed4295369f339b1abf154364736f6c63430008110033a264697066735822122050bac337d88d0bcde671425e4698718e8ce397e74cbb3c5ad04def1cce6d028364736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AttestationFactory.sol:AttestationFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1336,
        "contract": "contracts/AttestationFactory.sol:AttestationFactory",
        "label": "mainRegistry",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(MainRegistry)2341"
      },
      {
        "astId": 1339,
        "contract": "contracts/AttestationFactory.sol:AttestationFactory",
        "label": "_verificationThreshold",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1343,
        "contract": "contracts/AttestationFactory.sol:AttestationFactory",
        "label": "authorizedAddresses",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(MainRegistry)2341": {
        "encoding": "inplace",
        "label": "contract MainRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}