{
  "address": "0xE847673d2D61CDc2D14711826da2Db35b695CDc2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mainRegistryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "attestationAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "authors",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "contributors",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "authorName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        }
      ],
      "name": "AttestationCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAuthorized",
          "type": "address"
        }
      ],
      "name": "AuthorizedAddressAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "removedAuthorized",
          "type": "address"
        }
      ],
      "name": "AuthorizedAddressRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "VerificationThresholdUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_verificationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAuthorized",
          "type": "address"
        }
      ],
      "name": "addAuthorizedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_authors",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_authorName",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "_contributors",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_ipfsHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "_quotedAttestationId",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "_tags",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "_coPublishThreshold",
          "type": "uint256"
        }
      ],
      "name": "createAttestation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mainRegistry",
      "outputs": [
        {
          "internalType": "contract MainRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorizedToRemove",
          "type": "address"
        }
      ],
      "name": "removeAuthorizedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "setVerificationThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9d484bc1d36b7924fbb88854d40965049e3e5d671d6fa6512f538fd787bb88aa",
  "receipt": {
    "to": null,
    "from": "0x47cf32288Afffd890fa1cb3F6ce8faEB9C9F86d9",
    "contractAddress": "0xE847673d2D61CDc2D14711826da2Db35b695CDc2",
    "transactionIndex": 17,
    "gasUsed": "2749091",
    "logsBloom": "0x
    "blockHash": "0x7ca300b331d16d52f0ce076fef8b5e40e62dd46e7aa618d314eeb1194db110a5",
    "transactionHash": "0x9d484bc1d36b7924fbb88854d40965049e3e5d671d6fa6512f538fd787bb88aa",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 6639959,
        "transactionHash": "0x9d484bc1d36b7924fbb88854d40965049e3e5d671d6fa6512f538fd787bb88aa",
        "address": "0xE847673d2D61CDc2D14711826da2Db35b695CDc2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000047cf32288afffd890fa1cb3f6ce8faeb9c9f86d9"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x7ca300b331d16d52f0ce076fef8b5e40e62dd46e7aa618d314eeb1194db110a5"
      }
    ],
    "blockNumber": 6639959,
    "cumulativeGasUsed": "4001310",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1Bf972E053f4d73e4B21c184cff1aFfB88221e14"
  ],
  "numDeployments": 1,
  "solcInputHash": "8ff2fbd98ea997eef256c7792123e8a9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainRegistryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attestationAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"authors\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"contributors\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"authorName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"AttestationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAuthorized\",\"type\":\"address\"}],\"name\":\"AuthorizedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedAuthorized\",\"type\":\"address\"}],\"name\":\"AuthorizedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"VerificationThresholdUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_verificationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAuthorized\",\"type\":\"address\"}],\"name\":\"addAuthorizedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_authors\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_authorName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_quotedAttestationId\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_coPublishThreshold\",\"type\":\"uint256\"}],\"name\":\"createAttestation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainRegistry\",\"outputs\":[{\"internalType\":\"contract MainRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizedToRemove\",\"type\":\"address\"}],\"name\":\"removeAuthorizedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"setVerificationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AttestationFactory.sol\":\"AttestationFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/AttestationFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n//--# to be tested (& deployed)\\r\\n\\r\\n/**\\r\\n * @title AttestationFactory\\r\\n * @dev Decoland Dev Team\\r\\n * @notice\\r\\n *      The AttestationFactory contract is responsible for creating new attestation contracts.\\r\\n *      It interacts with the UserRegistry to ensure that all contributors are registered users.\\r\\n *      When a new attestation is created, it registers any new contributors and links the attestation to their profiles.\\r\\n *      The contract emits events for the creation of attestations and for adding attestations to user profiles.\\r\\n */\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./MainRegistry.sol\\\";\\r\\n\\r\\n// #ATTESTATION CONTRACT\\r\\n/**\\r\\n *      The Attestation contract represents an individual attestation (a \\\"knowledge production\\\").\\r\\n *      It holds the details of the attestation, including title, URL, IPFS hash, previous/related/quoted attestation ID (work/knwoledge production), tags, authors, and contributors\\r\\n *      Contributors must sign the attestation to activate it.\\r\\n *      The contract also handles contributions (donations or co-publishing 'donations'), upvotes, and the distribution (equally) of funds among contributors.\\r\\n */\\r\\ncontract Attestation is ReentrancyGuard {\\r\\n\\tusing SafeMath for uint256;\\r\\n\\tMainRegistry public mainRegistry;\\r\\n\\r\\n\\taddress[] private authors;\\r\\n\\tstring public authorName;\\r\\n\\taddress[] private contributors;\\r\\n\\tstring public ipfsHash;\\r\\n\\tstring public title;\\r\\n\\taddress[] private quotedAttestationId; //related/quoted previous work/attestationID to create links\\r\\n\\tstring[] private tags;\\r\\n\\tuint256 public coPublishThreshold;\\r\\n\\tuint256 public verificationThreshold;\\r\\n\\r\\n\\tmapping(address => bool) public hasSigned;\\r\\n\\tuint256 public signatureCount;\\r\\n\\tbool public isActivated;\\r\\n\\r\\n\\tmapping(address => bool) public isCoPublisher;\\r\\n\\taddress[] private coPublishers;\\r\\n\\r\\n\\tuint256 public upvoteCount;\\r\\n\\tmapping(address => bool) public hasUpvoted;\\r\\n\\r\\n\\tuint256 public totalReceivedFunds;\\r\\n\\tmapping(address => uint256) public unclaimedFunds;\\r\\n\\r\\n\\tevent ContributorSigned(address indexed contributor);\\r\\n\\tevent AttestationActivated();\\r\\n\\tevent CoPublisherAdded(address indexed coPublisher);\\r\\n\\tevent Upvoted(address indexed upvoter);\\r\\n\\tevent FundsReceived(address indexed sender, uint256 amount);\\r\\n\\tevent FundsClaimed(address indexed claimer, uint256 amount);\\r\\n\\tevent AffiliationRevoked(address indexed contributor);\\r\\n\\tevent CoPublishThresholdUpdated(uint256 oldThreshold, uint256 newThreshold);\\r\\n\\r\\n\\tconstructor(\\r\\n\\t\\taddress _mainRegistryAddress,\\r\\n\\t\\taddress[] memory _authors,\\r\\n\\t\\tstring memory _authorName,\\r\\n\\t\\taddress[] memory _contributors,\\r\\n\\t\\tstring memory _title,\\r\\n\\t\\tstring memory _ipfsHash,\\r\\n\\t\\taddress[] memory _quotedAttestationId,\\r\\n\\t\\tstring[] memory _tags,\\r\\n\\t\\tuint256 _coPublishThreshold,\\r\\n\\t\\tuint256 _verificationThreshold\\r\\n\\t) {\\r\\n\\t\\tmainRegistry = MainRegistry(_mainRegistryAddress);\\r\\n\\t\\tauthors = _authors;\\r\\n\\t\\tauthorName = _authorName;\\r\\n\\t\\tcontributors = _contributors;\\r\\n\\t\\tipfsHash = _ipfsHash;\\r\\n\\t\\ttitle = _title;\\r\\n\\t\\tquotedAttestationId = _quotedAttestationId;\\r\\n\\t\\ttags = _tags;\\r\\n\\t\\tcoPublishThreshold = _coPublishThreshold;\\r\\n\\t\\tverificationThreshold = _verificationThreshold;\\r\\n\\t\\t// Automatically sign the contract for the first author\\r\\n\\t\\t_sign(authors[0]);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _sign(address author) internal {\\r\\n\\t\\trequire(!hasSigned[author], \\\"Author has already signed.\\\");\\r\\n\\t\\thasSigned[author] = true;\\r\\n\\t\\tsignatureCount++;\\r\\n\\r\\n\\t\\tif (signatureCount == contributors.length + authors.length) {\\r\\n\\t\\t\\tisActivated = true;\\r\\n\\t\\t\\temit AttestationActivated();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit ContributorSigned(author);\\r\\n\\t}\\r\\n\\r\\n\\tfunction sign() external {\\r\\n\\t\\trequire(!isActivated, \\\"Attestation already activated\\\");\\r\\n\\t\\trequire(isContributor(msg.sender), \\\"Not a contributor\\\");\\r\\n\\t\\t_sign(msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t//missing amount for donation (and if the fund > threshold => co-publisher ?)\\r\\n\\t// Creditation as a co-publisher, no rights attached to it !!\\r\\n\\tfunction donate(uint256 amount) external payable {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tmsg.value == amount,\\r\\n\\t\\t\\t\\\"Sent value does not match specified amount\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(amount > 0, \\\"No funds sent\\\");\\r\\n\\r\\n\\t\\tdistributeFunds(amount);\\r\\n\\r\\n\\t\\temit FundsReceived(msg.sender, amount);\\r\\n\\r\\n\\t\\t// Check if the donation amount meets the co-publishing threshold\\r\\n\\t\\tif (amount >= coPublishThreshold && !isCoPublisher[msg.sender]) {\\r\\n\\t\\t\\tisCoPublisher[msg.sender] = true;\\r\\n\\t\\t\\tcoPublishers.push(msg.sender);\\r\\n\\t\\t\\temit CoPublisherAdded(msg.sender);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction setCoPublishThreshold(uint256 newThreshold) external {\\r\\n\\t\\trequire(isAuthor(msg.sender), \\\"Not an Author\\\");\\r\\n\\t\\trequire(newThreshold > 0, \\\"Threshold must be greater than zero\\\");\\r\\n\\t\\tuint256 oldThreshold = coPublishThreshold;\\r\\n\\t\\tcoPublishThreshold = newThreshold;\\r\\n\\t\\temit CoPublishThresholdUpdated(oldThreshold, newThreshold);\\r\\n\\t}\\r\\n\\r\\n\\tfunction upvote() external {\\r\\n\\t\\trequire(!hasUpvoted[msg.sender], \\\"Already upvoted\\\");\\r\\n\\t\\thasUpvoted[msg.sender] = true;\\r\\n\\t\\tupvoteCount++;\\r\\n\\r\\n\\t\\temit Upvoted(msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\tfunction claimFunds() external nonReentrant {\\r\\n\\t\\trequire(isContributor(msg.sender), \\\"Not a contributor or author\\\");\\r\\n\\t\\tuint256 amount = unclaimedFunds[msg.sender];\\r\\n\\t\\trequire(amount > 0, \\\"No funds to claim\\\");\\r\\n\\r\\n\\t\\tif (totalReceivedFunds >= verificationThreshold) {\\r\\n\\t\\t\\trequire(\\r\\n\\t\\t\\t\\tisVerifiedAuthor(msg.sender),\\r\\n\\t\\t\\t\\t\\\"Author(s) needs to be verified!\\\"\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tunclaimedFunds[msg.sender] = 0;\\r\\n\\t\\tpayable(msg.sender).transfer(amount);\\r\\n\\r\\n\\t\\temit FundsClaimed(msg.sender, amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction distributeFunds(uint256 amount) internal {\\r\\n\\t\\tuint256 totalRecipients = contributors.length + authors.length;\\r\\n\\t\\tuint256 sharePerRecipient = amount.div(totalRecipients);\\r\\n\\r\\n\\t\\tfor (uint256 i = 0; i < contributors.length; i++) {\\r\\n\\t\\t\\tunclaimedFunds[contributors[i]] = unclaimedFunds[contributors[i]]\\r\\n\\t\\t\\t\\t.add(sharePerRecipient);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (uint256 i = 0; i < authors.length; i++) {\\r\\n\\t\\t\\tunclaimedFunds[authors[i]] = unclaimedFunds[authors[i]].add(\\r\\n\\t\\t\\t\\tsharePerRecipient\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\ttotalReceivedFunds = totalReceivedFunds.add(amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction isAuthor(address _address) public view returns (bool) {\\r\\n\\t\\tfor (uint i = 0; i < authors.length; i++) {\\r\\n\\t\\t\\tif (authors[i] == _address) {\\r\\n\\t\\t\\t\\treturn true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn false;\\r\\n\\t}\\r\\n\\r\\n\\tfunction isVerifiedAuthor(address _address) internal view returns (bool) {\\r\\n\\t\\treturn isAuthor(_address) && mainRegistry.isWalletVerified(_address);\\r\\n\\t}\\r\\n\\r\\n\\t//Contributors here are author+co-authors+contributors\\r\\n\\tfunction isContributor(address _address) public view returns (bool) {\\r\\n\\t\\t// Check in the contributors array\\r\\n\\t\\tfor (uint i = 0; i < contributors.length; i++) {\\r\\n\\t\\t\\tif (contributors[i] == _address) {\\r\\n\\t\\t\\t\\treturn true;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Check if the address is an author\\r\\n\\t\\treturn isAuthor(_address);\\r\\n\\t}\\r\\n\\r\\n\\t//Any contributor can revoke his/her affiliation (only if not signed)\\r\\n\\tfunction revokeAffiliation() external {\\r\\n\\t\\trequire(isContributor(msg.sender), \\\"Not a contributor or author\\\");\\r\\n\\t\\trequire(!hasSigned[msg.sender], \\\"Cannot revoke after signing\\\");\\r\\n\\r\\n\\t\\tbool found = false;\\r\\n\\r\\n\\t\\t// Remove from contributors array\\r\\n\\t\\tfor (uint i = 0; i < contributors.length; i++) {\\r\\n\\t\\t\\tif (contributors[i] == msg.sender) {\\r\\n\\t\\t\\t\\tcontributors[i] = contributors[contributors.length - 1];\\r\\n\\t\\t\\t\\tcontributors.pop();\\r\\n\\t\\t\\t\\tfound = true;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// If not found in contributors, check in authors array\\r\\n\\t\\tif (!found) {\\r\\n\\t\\t\\tfor (uint i = 0; i < authors.length; i++) {\\r\\n\\t\\t\\t\\tif (authors[i] == msg.sender) {\\r\\n\\t\\t\\t\\t\\tauthors[i] = authors[authors.length - 1];\\r\\n\\t\\t\\t\\t\\tauthors.pop();\\r\\n\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Clear any unclaimed funds\\r\\n\\t\\tunclaimedFunds[msg.sender] = 0;\\r\\n\\r\\n\\t\\temit AffiliationRevoked(msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t// Getter functions for arrays\\r\\n\\tfunction getAuthors() external view returns (address[] memory) {\\r\\n\\t\\treturn authors;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getContributors() external view returns (address[] memory) {\\r\\n\\t\\treturn contributors;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getTags() external view returns (string[] memory) {\\r\\n\\t\\treturn tags;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getCoPublishers() external view returns (address[] memory) {\\r\\n\\t\\treturn coPublishers;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getQuotesAttestationIds()\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (address[] memory)\\r\\n\\t{\\r\\n\\t\\treturn quotedAttestationId;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// #ATTESTATION FACTORY CONTRACT\\r\\ncontract AttestationFactory is Ownable {\\r\\n\\tMainRegistry public mainRegistry;\\r\\n\\tuint256 public _verificationThreshold = 0.05 ether;\\r\\n\\tmapping(address => bool) public authorizedAddresses;\\r\\n\\r\\n\\tevent AttestationCreated(\\r\\n\\t\\taddress indexed attestationAddress,\\r\\n\\t\\taddress[] authors,\\r\\n\\t\\taddress[] contributors,\\r\\n\\t\\tstring authorName,\\r\\n\\t\\tstring title\\r\\n\\t);\\r\\n\\tevent VerificationThresholdUpdated(\\r\\n\\t\\tuint256 oldThreshold,\\r\\n\\t\\tuint256 newThreshold\\r\\n\\t);\\r\\n\\tevent AuthorizedAddressAdded(address indexed newAuthorized);\\r\\n\\tevent AuthorizedAddressRemoved(address indexed removedAuthorized);\\r\\n\\r\\n\\tconstructor(address _mainRegistryAddress) {\\r\\n\\t\\tmainRegistry = MainRegistry(_mainRegistryAddress);\\r\\n\\t\\tauthorizedAddresses[msg.sender] = true;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyAuthorized() {\\r\\n\\t\\trequire(authorizedAddresses[msg.sender], \\\"Not authorized\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setVerificationThreshold(\\r\\n\\t\\tuint256 newThreshold\\r\\n\\t) external onlyAuthorized {\\r\\n\\t\\tuint256 oldThreshold = _verificationThreshold;\\r\\n\\t\\t_verificationThreshold = newThreshold;\\r\\n\\t\\temit VerificationThresholdUpdated(oldThreshold, newThreshold);\\r\\n\\t}\\r\\n\\r\\n\\tfunction addAuthorizedAddress(address newAuthorized) external onlyOwner {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\t!authorizedAddresses[newAuthorized],\\r\\n\\t\\t\\t\\\"Address already authorized\\\"\\r\\n\\t\\t);\\r\\n\\t\\tauthorizedAddresses[newAuthorized] = true;\\r\\n\\t\\temit AuthorizedAddressAdded(newAuthorized);\\r\\n\\t}\\r\\n\\r\\n\\tfunction removeAuthorizedAddress(\\r\\n\\t\\taddress authorizedToRemove\\r\\n\\t) external onlyOwner {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tauthorizedAddresses[authorizedToRemove],\\r\\n\\t\\t\\t\\\"Address not authorized\\\"\\r\\n\\t\\t);\\r\\n\\t\\tauthorizedAddresses[authorizedToRemove] = false;\\r\\n\\t\\temit AuthorizedAddressRemoved(authorizedToRemove);\\r\\n\\t}\\r\\n\\r\\n\\tfunction createAttestation(\\r\\n\\t\\taddress[] memory _authors,\\r\\n\\t\\tstring memory _authorName,\\r\\n\\t\\taddress[] memory _contributors,\\r\\n\\t\\tstring memory _ipfsHash,\\r\\n\\t\\tstring memory _title,\\r\\n\\t\\taddress[] memory _quotedAttestationId,\\r\\n\\t\\tstring[] memory _tags,\\r\\n\\t\\tuint256 _coPublishThreshold\\r\\n\\t) external returns (address) {\\r\\n\\t\\tAttestation newAttestation = new Attestation(\\r\\n\\t\\t\\taddress(mainRegistry),\\r\\n\\t\\t\\t_authors,\\r\\n\\t\\t\\t_authorName,\\r\\n\\t\\t\\t_contributors,\\r\\n\\t\\t\\t_ipfsHash,\\r\\n\\t\\t\\t_title,\\r\\n\\t\\t\\t_quotedAttestationId,\\r\\n\\t\\t\\t_tags,\\r\\n\\t\\t\\t_coPublishThreshold,\\r\\n\\t\\t\\t_verificationThreshold\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\taddress attestationAddress = address(newAttestation);\\r\\n\\r\\n\\t\\taddress[] memory allParticipants = new address[](\\r\\n\\t\\t\\t_authors.length + _contributors.length\\r\\n\\t\\t);\\r\\n\\t\\tfor (uint i = 0; i < _authors.length; i++) {\\r\\n\\t\\t\\tallParticipants[i] = _authors[i];\\r\\n\\t\\t}\\r\\n\\t\\tfor (uint i = 0; i < _contributors.length; i++) {\\r\\n\\t\\t\\tallParticipants[_authors.length + i] = _contributors[i];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Ensure all participants are registered in the MainRegistry\\r\\n\\t\\tfor (uint i = 0; i < allParticipants.length; i++) {\\r\\n\\t\\t\\tif (mainRegistry.walletToUserId(allParticipants[i]) == 0) {\\r\\n\\t\\t\\t\\t// If the wallet is not associated with any user, create a new user with an empty username\\r\\n\\t\\t\\t\\tmainRegistry.registerUser(\\\"\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tmainRegistry.addAttestation(attestationAddress, allParticipants);\\r\\n\\t\\temit AttestationCreated(attestationAddress, _authors, _contributors, _authorName, _title);\\r\\n\\t\\treturn attestationAddress;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x8fd83a6be0be679a59d985bfa48bd505268aa394f31492bf0db6103fa8871069\",\"license\":\"MIT\"},\"contracts/MainRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\ncontract MainRegistry {\\r\\n\\tusing Counters for Counters.Counter;\\r\\n\\tCounters.Counter private _attestationIds;\\r\\n\\tCounters.Counter private _userIds;\\r\\n\\r\\n\\tstruct WalletAddress {\\r\\n\\t\\taddress userAddress;\\r\\n\\t\\tuint256[] attestationIds;\\r\\n\\t\\tbool isVerified;\\r\\n\\t}\\r\\n\\r\\n\\tstruct UserProfile {\\r\\n\\t\\tuint256 userId;\\r\\n\\t\\tstring userName;\\r\\n\\t\\taddress[] wallets;\\r\\n\\t}\\r\\n\\r\\n\\taddress public owner;\\r\\n\\tmapping(address => bool) public authorizedAddresses;\\r\\n\\tmapping(uint256 => UserProfile) public users; // userId -> UserProfile\\r\\n\\tmapping(address => uint256) public walletToUserId; // wallet -> userId\\r\\n\\tmapping(address => WalletAddress) public wallets; // wallet -> WalletAddress\\r\\n\\tmapping(uint256 => address) public attestationAddresses;\\r\\n\\r\\n\\tuint256 public constant MAX_ATTESTATIONS_PER_WALLET = 100; // Example limit\\r\\n\\r\\n\\tmodifier onlyOwner() {\\r\\n\\t\\trequire(msg.sender == owner, \\\"Only the owner can perform this action\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyAuthorized() {\\r\\n\\t\\trequire(authorizedAddresses[msg.sender], \\\"Not authorized\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tevent UserRegistered(uint256 indexed userId, string userName);\\r\\n\\tevent WalletAdded(uint256 indexed userId, address indexed wallet);\\r\\n\\tevent AttestationCreated(\\r\\n\\t\\tuint256 indexed attestationId,\\r\\n\\t\\taddress attestationAddress\\r\\n\\t);\\r\\n\\tevent AttestationAddedToWallet(\\r\\n\\t\\taddress indexed wallet,\\r\\n\\t\\tuint256 attestationId\\r\\n\\t);\\r\\n\\tevent UserNameUpdated(uint256 indexed userId, string newUserName);\\r\\n\\tevent WalletVerified(address indexed wallet);\\r\\n\\r\\n\\tconstructor(address _owner) {\\r\\n\\t\\towner = _owner;\\r\\n\\t\\tauthorizedAddresses[owner] = true;\\r\\n\\r\\n\\t\\t_userIds.increment();\\r\\n\\t\\tuint256 newUserId = _userIds.current();\\r\\n\\t\\tusers[newUserId] = UserProfile({\\r\\n\\t\\t\\tuserId: newUserId,\\r\\n\\t\\t\\tuserName: \\\"p0nk\\\",\\r\\n\\t\\t\\twallets: new address[](0)\\r\\n\\t\\t});\\r\\n\\t\\t_addWalletToUser(newUserId, _owner);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _addWalletToUser(uint256 _userId, address _wallet) private {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\twalletToUserId[_wallet] == 0,\\r\\n\\t\\t\\t\\\"Wallet already associated with a user\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tusers[_userId].wallets.push(_wallet);\\r\\n\\t\\twalletToUserId[_wallet] = _userId;\\r\\n\\t\\twallets[_wallet] = WalletAddress({\\r\\n\\t\\t\\tuserAddress: _wallet,\\r\\n\\t\\t\\tattestationIds: new uint256[](0),\\r\\n\\t\\t\\tisVerified: false\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\temit WalletAdded(_userId, _wallet);\\r\\n\\t}\\r\\n\\r\\n\\tfunction registerUser(\\r\\n\\t\\tstring memory _userName\\r\\n\\t) external onlyAuthorized returns (uint256) {\\r\\n\\t\\tif (walletToUserId[msg.sender] != 0) {\\r\\n\\t\\t\\t// User already registered, return existing userId\\r\\n\\t\\t\\treturn walletToUserId[msg.sender];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t_userIds.increment();\\r\\n\\t\\tuint256 newUserId = _userIds.current();\\r\\n\\t\\tusers[newUserId] = UserProfile({\\r\\n\\t\\t\\tuserId: newUserId,\\r\\n\\t\\t\\tuserName: _userName,\\r\\n\\t\\t\\twallets: new address[](0)\\r\\n\\t\\t});\\r\\n\\r\\n\\t\\t_addWalletToUser(newUserId, msg.sender);\\r\\n\\r\\n\\t\\temit UserRegistered(newUserId, _userName);\\r\\n\\t\\treturn newUserId;\\r\\n\\t}\\r\\n\\r\\n\\tfunction addWalletToUser(address _newWallet) external onlyAuthorized {\\r\\n\\t\\tuint256 userId = walletToUserId[msg.sender];\\r\\n\\t\\trequire(userId != 0, \\\"User not registered\\\");\\r\\n\\t\\t_addWalletToUser(userId, _newWallet);\\r\\n\\t}\\r\\n\\r\\n\\tfunction addAuthorizedAddress(address _address) external onlyOwner {\\r\\n\\t\\tauthorizedAddresses[_address] = true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction removeAuthorizedAddress(address _address) external onlyOwner {\\r\\n\\t\\tauthorizedAddresses[_address] = false;\\r\\n\\t}\\r\\n\\r\\n\\tfunction verifyWallet(address _wallet) external onlyAuthorized {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\twalletToUserId[_wallet] != 0,\\r\\n\\t\\t\\t\\\"Wallet not associated with any user\\\"\\r\\n\\t\\t);\\r\\n\\t\\twallets[_wallet].isVerified = true;\\r\\n\\t\\temit WalletVerified(_wallet);\\r\\n\\t}\\r\\n\\r\\n\\tfunction isWalletVerified(address _wallet) public view returns (bool) {\\r\\n\\t\\treturn wallets[_wallet].isVerified;\\r\\n\\t}\\r\\n\\r\\n\\tfunction addAttestation(\\r\\n\\t\\taddress _attestationAddress,\\r\\n\\t\\taddress[] memory _participants\\r\\n\\t) external onlyAuthorized {\\r\\n\\t\\t_attestationIds.increment();\\r\\n\\t\\tuint256 _newAttestationId = _attestationIds.current();\\r\\n\\t\\tattestationAddresses[_newAttestationId] = _attestationAddress;\\r\\n\\r\\n\\t\\tfor (uint i = 0; i < _participants.length; i++) {\\r\\n\\t\\t\\taddress wallet = _participants[i];\\r\\n\\t\\t\\tWalletAddress storage walletAddr = wallets[wallet];\\r\\n\\t\\t\\trequire(\\r\\n\\t\\t\\t\\twalletAddr.attestationIds.length < MAX_ATTESTATIONS_PER_WALLET,\\r\\n\\t\\t\\t\\t\\\"Max attestations reached for this wallet\\\"\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\twalletAddr.attestationIds.push(_newAttestationId);\\r\\n\\t\\t\\temit AttestationAddedToWallet(wallet, _newAttestationId);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit AttestationCreated(_newAttestationId, _attestationAddress);\\r\\n\\t}\\r\\n\\r\\n\\tfunction updateUserName(string memory _newUserName) external {\\r\\n\\t\\trequire(bytes(_newUserName).length > 0, \\\"Username cannot be empty\\\");\\r\\n\\t\\tuint256 userId = walletToUserId[msg.sender];\\r\\n\\t\\trequire(userId != 0, \\\"User not registered\\\");\\r\\n\\r\\n\\t\\t// Ensure the caller is associated with this user account\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tusers[userId].wallets.length > 0,\\r\\n\\t\\t\\t\\\"No wallets associated with this user\\\"\\r\\n\\t\\t);\\r\\n\\t\\tbool isAuthorized = false;\\r\\n\\t\\tfor (uint i = 0; i < users[userId].wallets.length; i++) {\\r\\n\\t\\t\\tif (users[userId].wallets[i] == msg.sender) {\\r\\n\\t\\t\\t\\tisAuthorized = true;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\trequire(isAuthorized, \\\"Not authorized to update this user's name\\\");\\r\\n\\r\\n\\t\\tusers[userId].userName = _newUserName;\\r\\n\\t\\temit UserNameUpdated(userId, _newUserName);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getAttestationCount() external view returns (uint256) {\\r\\n\\t\\treturn _attestationIds.current();\\r\\n\\t}\\r\\n\\r\\n\\tfunction getWalletAttestations(\\r\\n\\t\\taddress _wallet,\\r\\n\\t\\tuint256 _offset,\\r\\n\\t\\tuint256 _limit\\r\\n\\t) public view returns (uint256[] memory attestationIds) {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\twalletToUserId[_wallet] != 0,\\r\\n\\t\\t\\t\\\"Wallet not associated with any user\\\"\\r\\n\\t\\t);\\r\\n\\t\\tWalletAddress storage walletAddr = wallets[_wallet];\\r\\n\\t\\tuint256[] storage allAttestations = walletAddr.attestationIds;\\r\\n\\t\\tuint256 total = allAttestations.length;\\r\\n\\r\\n\\t\\trequire(_offset < total, \\\"Offset out of bounds\\\");\\r\\n\\r\\n\\t\\tuint256 end = _offset + _limit > total ? total : _offset + _limit;\\r\\n\\t\\tuint256 length = end - _offset;\\r\\n\\r\\n\\t\\tattestationIds = new uint256[](length);\\r\\n\\t\\tfor (uint256 i = 0; i < length; i++) {\\r\\n\\t\\t\\tattestationIds[i] = allAttestations[_offset + i];\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn attestationIds;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getWalletAttestationCount(\\r\\n\\t\\taddress _wallet\\r\\n\\t) public view returns (uint256) {\\r\\n\\t\\treturn wallets[_wallet].attestationIds.length;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserName(\\r\\n\\t\\taddress _wallet\\r\\n\\t) external view returns (string memory) {\\r\\n\\t\\tuint256 userId = walletToUserId[_wallet];\\r\\n\\t\\trequire(userId != 0, \\\"User not registered\\\");\\r\\n\\t\\treturn users[userId].userName;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserWallets(\\r\\n\\t\\tuint256 _userId\\r\\n\\t) public view returns (address[] memory) {\\r\\n\\t\\trequire(users[_userId].userId != 0, \\\"User does not exist\\\");\\r\\n\\t\\treturn users[_userId].wallets;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x3d788a82abce1231df9dd99961df6de1db62623327f0e4d374205e17aaf39c39\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000ab5760003560e01c806370712939116200006e578063707129391462000141578063715018a614620001585780638da5cb5b1462000162578063f19e207e1462000174578063f2fde38b14620001ab57600080fd5b8063040fcdb814620000b05780631250e17e14620000cd57806338cc32c414620000fd57806342f1181e146200011657806355da3dd7146200012d575b600080fd5b620000ba60025481565b6040519081526020015b60405180910390f35b620000e4620000de36600462000ae6565b620001c2565b6040516001600160a01b039091168152602001620000c4565b620001146200010e36600462000c21565b62000578565b005b620001146200012736600462000c3b565b62000613565b600154620000e4906001600160a01b031681565b620001146200015236600462000c3b565b620006d4565b620001146200078a565b6000546001600160a01b0316620000e4565b6200019a6200018536600462000c3b565b60036020526000908152604090205460ff1681565b6040519015158152602001620000c4565b62000114620001bc36600462000c3b565b620007a2565b600080600160009054906101000a90046001600160a01b03168a8a8a8a8a8a8a8a600254604051620001f490620008cd565b620002099a9998979695949392919062000cee565b604051809103906000f08015801562000226573d6000803e3d6000fd5b5088518b5191925082916000916200023e9162000e16565b67ffffffffffffffff811115620002595762000259620008db565b60405190808252806020026020018201604052801562000283578160200160208202803683370190505b50905060005b8c51811015620002f2578c8181518110620002a857620002a862000e32565b6020026020010151828281518110620002c557620002c562000e32565b6001600160a01b039092166020928302919091019091015280620002e98162000e48565b91505062000289565b5060005b8a518110156200036d578a818151811062000315576200031562000e32565b602002602001015182828f516200032d919062000e16565b8151811062000340576200034062000e32565b6001600160a01b039092166020928302919091019091015280620003648162000e48565b915050620002f6565b5060005b8151811015620004b75760015482516001600160a01b0390911690634bb5438490849084908110620003a757620003a762000e32565b60200260200101516040518263ffffffff1660e01b8152600401620003db91906001600160a01b0391909116815260200190565b602060405180830381865afa158015620003f9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200041f919062000e64565b600003620004a257600154604051631c13c6e560e21b815260206004820152600060248201526001600160a01b039091169063704f1b94906044016020604051808303816000875af11580156200047a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004a0919062000e64565b505b80620004ae8162000e48565b91505062000371565b5060015460405163cafadbb960e01b81526001600160a01b039091169063cafadbb990620004ec908590859060040162000e7e565b600060405180830381600087803b1580156200050757600080fd5b505af11580156200051c573d6000803e3d6000fd5b50505050816001600160a01b03167f20231e96474c9d6a0405aa663547cabb006bb32274f11134fe3dd78695f5af718d8c8e8c60405162000561949392919062000eac565b60405180910390a2509a9950505050505050505050565b3360009081526003602052604090205460ff16620005ce5760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064015b60405180910390fd5b600280549082905560408051828152602081018490527f64f30c20f1b54bf3f4123915fdb7c86db11cbdf94a186e56552678e6d7b5d19a910160405180910390a15050565b6200061d62000821565b6001600160a01b03811660009081526003602052604090205460ff1615620006885760405162461bcd60e51b815260206004820152601a60248201527f4164647265737320616c726561647920617574686f72697a65640000000000006044820152606401620005c5565b6001600160a01b038116600081815260036020526040808220805460ff19166001179055517f10ac961f00d5e732ba4dcc2c6fb09bebea0eb9edd2a75c8109775ef288382e679190a250565b620006de62000821565b6001600160a01b03811660009081526003602052604090205460ff16620007415760405162461bcd60e51b81526020600482015260166024820152751059191c995cdcc81b9bdd08185d5d1a1bdc9a5e995960521b6044820152606401620005c5565b6001600160a01b038116600081815260036020526040808220805460ff19169055517f66d5f06f711af3c9feba3203fdb00b51345d514c68585d9d319c5ff5e6f775929190a250565b6200079462000821565b620007a060006200087d565b565b620007ac62000821565b6001600160a01b038116620008135760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620005c5565b6200081e816200087d565b50565b6000546001600160a01b03163314620007a05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620005c5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611fe18062000f0d83390190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156200091d576200091d620008db565b604052919050565b600067ffffffffffffffff821115620009425762000942620008db565b5060051b60200190565b80356001600160a01b03811681146200096457600080fd5b919050565b600082601f8301126200097b57600080fd5b81356020620009946200098e8362000925565b620008f1565b82815260059290921b84018101918181019086841115620009b457600080fd5b8286015b84811015620009da57620009cc816200094c565b8352918301918301620009b8565b509695505050505050565b600082601f830112620009f757600080fd5b813567ffffffffffffffff81111562000a145762000a14620008db565b62000a29601f8201601f1916602001620008f1565b81815284602083860101111562000a3f57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011262000a6e57600080fd5b8135602062000a816200098e8362000925565b82815260059290921b8401810191818101908684111562000aa157600080fd5b8286015b84811015620009da57803567ffffffffffffffff81111562000ac75760008081fd5b62000ad78986838b0101620009e5565b84525091830191830162000aa5565b600080600080600080600080610100898b03121562000b0457600080fd5b883567ffffffffffffffff8082111562000b1d57600080fd5b62000b2b8c838d0162000969565b995060208b013591508082111562000b4257600080fd5b62000b508c838d01620009e5565b985060408b013591508082111562000b6757600080fd5b62000b758c838d0162000969565b975060608b013591508082111562000b8c57600080fd5b62000b9a8c838d01620009e5565b965060808b013591508082111562000bb157600080fd5b62000bbf8c838d01620009e5565b955060a08b013591508082111562000bd657600080fd5b62000be48c838d0162000969565b945060c08b013591508082111562000bfb57600080fd5b5062000c0a8b828c0162000a5c565b92505060e089013590509295985092959890939650565b60006020828403121562000c3457600080fd5b5035919050565b60006020828403121562000c4e57600080fd5b62000c59826200094c565b9392505050565b600081518084526020808501945080840160005b8381101562000c9b5781516001600160a01b03168752958201959082019060010162000c74565b509495945050505050565b6000815180845260005b8181101562000cce5760208185018101518683018201520162000cb0565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b038b16815261014060208083018290526000919062000d178483018e62000c60565b9150838203604085015262000d2d828d62000ca6565b9150838203606085015262000d43828c62000c60565b9150838203608085015262000d59828b62000ca6565b915083820360a085015262000d6f828a62000ca6565b915083820360c085015262000d85828962000c60565b915083820360e08501528187518084528284019150828160051b850101838a0160005b8381101562000dda57601f1987840301855262000dc783835162000ca6565b9486019492509085019060010162000da8565b505061010087019890985250505050610120909101919091525098975050505050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111562000e2c5762000e2c62000e00565b92915050565b634e487b7160e01b600052603260045260246000fd5b60006001820162000e5d5762000e5d62000e00565b5060010190565b60006020828403121562000e7757600080fd5b5051919050565b6001600160a01b038316815260406020820181905260009062000ea49083018462000c60565b949350505050565b60808152600062000ec1608083018762000c60565b828103602084015262000ed5818762000c60565b9050828103604084015262000eeb818662000ca6565b9050828103606084015262000f01818562000ca6565b97965050505050505056fe60806040523480156200001157600080fd5b5060405162001fe138038062001fe18339810160408190526200003491620005b4565b6001600081905580546001600160a01b0319166001600160a01b038c161790558851620000699060029060208c019062000259565b5060036200007889826200079c565b5086516200008e9060049060208a019062000259565b5060056200009d86826200079c565b506006620000ac87826200079c565b508351620000c290600790602087019062000259565b508251620000d8906008906020860190620002c3565b506009829055600a819055600280546200011a9190600090620000ff57620000ff62000868565b6000918252602090912001546001600160a01b03166200012a565b50505050505050505050620008cc565b6001600160a01b0381166000908152600b602052604090205460ff1615620001985760405162461bcd60e51b815260206004820152601a60248201527f417574686f722068617320616c7265616479207369676e65642e000000000000604482015260640160405180910390fd5b6001600160a01b0381166000908152600b60205260408120805460ff19166001179055600c805491620001cb8362000894565b9091555050600254600454620001e29190620008b0565b600c54036200022257600d805460ff191660011790556040517f49ab2c33d6aa0d5732af0c373636e337a25a80ab9e6961359356cd9df689e80990600090a15b6040516001600160a01b038216907f55e089ae85f06da415f9041aa8a5c03313aebb8f346b25859b3127057819829290600090a250565b828054828255906000526020600020908101928215620002b1579160200282015b82811115620002b157825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200027a565b50620002bf9291506200031c565b5090565b8280548282559060005260206000209081019282156200030e579160200282015b828111156200030e5782518290620002fd90826200079c565b5091602001919060010190620002e4565b50620002bf92915062000333565b5b80821115620002bf57600081556001016200031d565b80821115620002bf5760006200034a828262000354565b5060010162000333565b50805462000362906200070d565b6000825580601f1062000373575050565b601f0160209004906000526020600020908101906200039391906200031c565b50565b80516001600160a01b0381168114620003ae57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620003f457620003f4620003b3565b604052919050565b60006001600160401b03821115620004185762000418620003b3565b5060051b60200190565b600082601f8301126200043457600080fd5b815160206200044d6200044783620003fc565b620003c9565b82815260059290921b840181019181810190868411156200046d57600080fd5b8286015b848110156200049357620004858162000396565b835291830191830162000471565b509695505050505050565b600082601f830112620004b057600080fd5b81516001600160401b03811115620004cc57620004cc620003b3565b6020620004e2601f8301601f19168201620003c9565b8281528582848701011115620004f757600080fd5b60005b8381101562000517578581018301518282018401528201620004fa565b506000928101909101919091529392505050565b600082601f8301126200053d57600080fd5b81516020620005506200044783620003fc565b82815260059290921b840181019181810190868411156200057057600080fd5b8286015b84811015620004935780516001600160401b03811115620005955760008081fd5b620005a58986838b01016200049e565b84525091830191830162000574565b6000806000806000806000806000806101408b8d031215620005d557600080fd5b620005e08b62000396565b60208c0151909a506001600160401b0380821115620005fe57600080fd5b6200060c8e838f0162000422565b9a5060408d01519150808211156200062357600080fd5b620006318e838f016200049e565b995060608d01519150808211156200064857600080fd5b620006568e838f0162000422565b985060808d01519150808211156200066d57600080fd5b6200067b8e838f016200049e565b975060a08d01519150808211156200069257600080fd5b620006a08e838f016200049e565b965060c08d0151915080821115620006b757600080fd5b620006c58e838f0162000422565b955060e08d0151915080821115620006dc57600080fd5b50620006eb8d828e016200052b565b9350506101008b015191506101208b015190509295989b9194979a5092959850565b600181811c908216806200072257607f821691505b6020821081036200074357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200079757600081815260208120601f850160051c81016020861015620007725750805b601f850160051c820191505b8181101562000793578281556001016200077e565b5050505b505050565b81516001600160401b03811115620007b857620007b8620003b3565b620007d081620007c984546200070d565b8462000749565b602080601f831160018114620008085760008415620007ef5750858301515b600019600386901b1c1916600185901b17855562000793565b600085815260208120601f198616915b82811015620008395788860151825594840194600190910190840162000818565b5085821015620008585787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201620008a957620008a96200087e565b5060010190565b80820180821115620008c657620008c66200087e565b92915050565b61170580620008dc6000396000f3fe60806040526004361061019c5760003560e01c806392d7727c116100ec578063c623674f1161008a578063ea10b23111610064578063ea10b23114610464578063f14faf6f1461047a578063f613c8711461048d578063f69197eb146104bd57600080fd5b8063c623674f14610419578063d4b125301461042e578063e7f55ed61461044e57600080fd5b8063af157c19116100c6578063af157c1914610377578063ba788a141461038c578063bce248cb146103bc578063bf6a1413146103e957600080fd5b806392d7727c1461032b578063995d9ab714610340578063ac3077731461036257600080fd5b80634a8c1fb4116101595780636dd85b19116101335780636dd85b19146102d65780637fc622f4146102eb5780638361e036146103005780638d1e829b1461031557600080fd5b80634a8c1fb41461026f57806355da3dd7146102895780636a64aabb146102c157600080fd5b806305fd1ae0146101a1578063167feb09146101cc578063197aecb1146101f05780631d0d35f5146102065780632ca15122146102365780634a79d50c1461024d575b600080fd5b3480156101ad57600080fd5b506101b66104dd565b6040516101c39190611486565b60405180910390f35b3480156101d857600080fd5b506101e2600a5481565b6040519081526020016101c3565b3480156101fc57600080fd5b506101e260125481565b34801561021257600080fd5b506102266102213660046114d3565b61053f565b60405190151581526020016101c3565b34801561024257600080fd5b5061024b6105af565b005b34801561025957600080fd5b5061026261065b565b6040516101c39190611542565b34801561027b57600080fd5b50600d546102269060ff1681565b34801561029557600080fd5b506001546102a9906001600160a01b031681565b6040516001600160a01b0390911681526020016101c3565b3480156102cd57600080fd5b506102626106e9565b3480156102e257600080fd5b506101b66106f6565b3480156102f757600080fd5b506101b6610756565b34801561030c57600080fd5b5061024b6107b6565b34801561032157600080fd5b506101e260105481565b34801561033757600080fd5b5061024b610ac3565b34801561034c57600080fd5b50610355610b6f565b6040516101c39190611555565b34801561036e57600080fd5b5061024b610c48565b34801561038357600080fd5b506101b6610dd2565b34801561039857600080fd5b506102266103a73660046114d3565b60116020526000908152604090205460ff1681565b3480156103c857600080fd5b506101e26103d73660046114d3565b60136020526000908152604090205481565b3480156103f557600080fd5b506102266104043660046114d3565b600b6020526000908152604090205460ff1681565b34801561042557600080fd5b50610262610e32565b34801561043a57600080fd5b506102266104493660046114d3565b610e3f565b34801561045a57600080fd5b506101e2600c5481565b34801561047057600080fd5b506101e260095481565b61024b6104883660046115b7565b610ea8565b34801561049957600080fd5b506102266104a83660046114d3565b600e6020526000908152604090205460ff1681565b3480156104c957600080fd5b5061024b6104d83660046115b7565b611033565b6060600780548060200260200160405190810160405280929190818152602001828054801561053557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610517575b5050505050905090565b6000805b60045481101561059f57826001600160a01b03166004828154811061056a5761056a6115d0565b6000918252602090912001546001600160a01b03160361058d5750600192915050565b80610597816115fc565b915050610543565b506105a982610e3f565b92915050565b600d5460ff16156106075760405162461bcd60e51b815260206004820152601d60248201527f4174746573746174696f6e20616c72656164792061637469766174656400000060448201526064015b60405180910390fd5b6106103361053f565b6106505760405162461bcd60e51b81526020600482015260116024820152702737ba10309031b7b73a3934b13aba37b960791b60448201526064016105fe565b61065933611119565b565b6006805461066890611615565b80601f016020809104026020016040519081016040528092919081815260200182805461069490611615565b80156106e15780601f106106b6576101008083540402835291602001916106e1565b820191906000526020600020905b8154815290600101906020018083116106c457829003601f168201915b505050505081565b6003805461066890611615565b6060600f805480602002602001604051908101604052809291908181526020018280548015610535576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610517575050505050905090565b60606002805480602002602001604051908101604052809291908181526020018280548015610535576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610517575050505050905090565b6107bf3361053f565b61080b5760405162461bcd60e51b815260206004820152601b60248201527f4e6f74206120636f6e7472696275746f72206f7220617574686f72000000000060448201526064016105fe565b336000908152600b602052604090205460ff161561086b5760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f74207265766f6b65206166746572207369676e696e67000000000060448201526064016105fe565b6000805b60045481101561097857336001600160a01b031660048281548110610896576108966115d0565b6000918252602090912001546001600160a01b03160361096657600480546108c09060019061164f565b815481106108d0576108d06115d0565b600091825260209091200154600480546001600160a01b0390921691839081106108fc576108fc6115d0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600480548061093b5761093b611662565b600082815260209020810160001990810180546001600160a01b031916905501905560019150610978565b80610970816115fc565b91505061086f565b5080610a885760005b600254811015610a8657336001600160a01b0316600282815481106109a8576109a86115d0565b6000918252602090912001546001600160a01b031603610a7457600280546109d29060019061164f565b815481106109e2576109e26115d0565b600091825260209091200154600280546001600160a01b039092169183908110610a0e57610a0e6115d0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506002805480610a4d57610a4d611662565b600082815260209020810160001990810180546001600160a01b0319169055019055610a86565b80610a7e816115fc565b915050610981565b505b33600081815260136020526040808220829055517f63c343245a29ba32126097ef0590bb182cd477568bd2a4daf57e3f137e011bf49190a250565b3360009081526011602052604090205460ff1615610b155760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481d5c1d9bdd1959608a1b60448201526064016105fe565b336000908152601160205260408120805460ff191660011790556010805491610b3d836115fc565b909155505060405133907f261adcc11df584b1e56db3dba253410bb208b17821e3b351cbacb117cea2292690600090a2565b60606008805480602002602001604051908101604052809291908181526020016000905b82821015610c3f578382906000526020600020018054610bb290611615565b80601f0160208091040260200160405190810160405280929190818152602001828054610bde90611615565b8015610c2b5780601f10610c0057610100808354040283529160200191610c2b565b820191906000526020600020905b815481529060010190602001808311610c0e57829003601f168201915b505050505081526020019060010190610b93565b50505050905090565b610c5061123e565b610c593361053f565b610ca55760405162461bcd60e51b815260206004820152601b60248201527f4e6f74206120636f6e7472696275746f72206f7220617574686f72000000000060448201526064016105fe565b3360009081526013602052604090205480610cf65760405162461bcd60e51b81526020600482015260116024820152704e6f2066756e647320746f20636c61696d60781b60448201526064016105fe565b600a5460125410610d5657610d0a33611297565b610d565760405162461bcd60e51b815260206004820152601f60248201527f417574686f72287329206e6565647320746f206265207665726966696564210060448201526064016105fe565b336000818152601360205260408082208290555183156108fc0291849190818181858888f19350505050158015610d91573d6000803e3d6000fd5b5060405181815233907fa65a8b4f7f65a1063243d7f7e9e4da00ff767599acf21549ef2548a45d1695ae9060200160405180910390a2506106596001600055565b60606004805480602002602001604051908101604052809291908181526020018280548015610535576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311610517575050505050905090565b6005805461066890611615565b6000805b600254811015610e9f57826001600160a01b031660028281548110610e6a57610e6a6115d0565b6000918252602090912001546001600160a01b031603610e8d5750600192915050565b80610e97816115fc565b915050610e43565b50600092915050565b803414610f0a5760405162461bcd60e51b815260206004820152602a60248201527f53656e742076616c756520646f6573206e6f74206d61746368207370656369666044820152691a595908185b5bdd5b9d60b21b60648201526084016105fe565b60008111610f4a5760405162461bcd60e51b815260206004820152600d60248201526c139bc8199d5b991cc81cd95b9d609a1b60448201526064016105fe565b610f5381611317565b60405181815233907f8e47b87b0ef542cdfa1659c551d88bad38aa7f452d2bbb349ab7530dfec8be8f9060200160405180910390a26009548110158015610faa5750336000908152600e602052604090205460ff16155b1561103057336000818152600e6020526040808220805460ff19166001908117909155600f8054918201815583527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180546001600160a01b03191684179055517f17315e8a7842b7b3653b07d725976cf9ea9b7460f9cc3e721b7d72578cf358fa9190a25b50565b61103c33610e3f565b6110785760405162461bcd60e51b815260206004820152600d60248201526c2737ba1030b71020baba3437b960991b60448201526064016105fe565b600081116110d45760405162461bcd60e51b815260206004820152602360248201527f5468726573686f6c64206d7573742062652067726561746572207468616e207a60448201526265726f60e81b60648201526084016105fe565b600980549082905560408051828152602081018490527f942de8ef2cd89c2657df40444970b9e9f6dda6f481c9ca0db5a78382cbffe310910160405180910390a15050565b6001600160a01b0381166000908152600b602052604090205460ff16156111825760405162461bcd60e51b815260206004820152601a60248201527f417574686f722068617320616c7265616479207369676e65642e00000000000060448201526064016105fe565b6001600160a01b0381166000908152600b60205260408120805460ff19166001179055600c8054916111b3836115fc565b90915550506002546004546111c89190611678565b600c540361120757600d805460ff191660011790556040517f49ab2c33d6aa0d5732af0c373636e337a25a80ab9e6961359356cd9df689e80990600090a15b6040516001600160a01b038216907f55e089ae85f06da415f9041aa8a5c03313aebb8f346b25859b3127057819829290600090a250565b6002600054036112905760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105fe565b6002600055565b60006112a282610e3f565b80156105a95750600154604051631fddb5c760e21b81526001600160a01b03848116600483015290911690637f76d71c90602401602060405180830381865afa1580156112f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a9919061168b565b60025460045460009161132991611678565b905060006113378383611467565b905060005b6004548110156113da5761138c826013600060048581548110611361576113616115d0565b60009182526020808320909101546001600160a01b031683528201929092526040019020549061147a565b60136000600484815481106113a3576113a36115d0565b60009182526020808320909101546001600160a01b03168352820192909252604001902055806113d2816115fc565b91505061133c565b5060005b60025481101561145157611403826013600060028581548110611361576113616115d0565b601360006002848154811061141a5761141a6115d0565b60009182526020808320909101546001600160a01b0316835282019290925260400190205580611449816115fc565b9150506113de565b5060125461145f908461147a565b601255505050565b600061147382846116ad565b9392505050565b60006114738284611678565b6020808252825182820181905260009190848201906040850190845b818110156114c75783516001600160a01b0316835292840192918401916001016114a2565b50909695505050505050565b6000602082840312156114e557600080fd5b81356001600160a01b038116811461147357600080fd5b6000815180845260005b8181101561152257602081850181015186830182015201611506565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061147360208301846114fc565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156115aa57603f198886030184526115988583516114fc565b9450928501929085019060010161157c565b5092979650505050505050565b6000602082840312156115c957600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161160e5761160e6115e6565b5060010190565b600181811c9082168061162957607f821691505b60208210810361164957634e487b7160e01b600052602260045260246000fd5b50919050565b818103818111156105a9576105a96115e6565b634e487b7160e01b600052603160045260246000fd5b808201808211156105a9576105a96115e6565b60006020828403121561169d57600080fd5b8151801515811461147357600080fd5b6000826116ca57634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212208782ccc269605a120a48fcb7cbbf3295511aae48d6f68d3230f89d74245a955b64736f6c63430008110033a264697066735822122048f3b8a6503160ef1467c873e263ca9ca8b633746e876388d4b6e84194a65ccb64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AttestationFactory.sol:AttestationFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1352,
        "contract": "contracts/AttestationFactory.sol:AttestationFactory",
        "label": "mainRegistry",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(MainRegistry)2369"
      },
      {
        "astId": 1355,
        "contract": "contracts/AttestationFactory.sol:AttestationFactory",
        "label": "_verificationThreshold",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1359,
        "contract": "contracts/AttestationFactory.sol:AttestationFactory",
        "label": "authorizedAddresses",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(MainRegistry)2369": {
        "encoding": "inplace",
        "label": "contract MainRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}